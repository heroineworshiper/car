; mane board for RC car


; 18f1320
; usb_programmer -p 18f1320 -c 0x300000 1100100100000000
; Internal oscillator
; usb_programmer -p 18f1320 -c 0x300002 0001111100001010
; brownout protection
; usb_programmer -p 18f1320 -c 0x300006 0000000010000001
; low voltage programming disabled
; make
; usb_programmer -p 18f1320 -z 256 radio.hex
; usb_programmer -p 18f1320 -z 256  -r radio.hex


PROCESSOR 18f1320
#include "p18f1320.inc"
#include "util.inc"
#include "chksum.inc"
#include "cc1101.inc"


#define SDO_PIN 2
#define SDO_LAT LATA
#define SDO_TRIS TRISA

#define SCK_PIN 3
#define SCK_LAT LATA
#define SCK_TRIS TRISA

#define CS0_PIN 5
#define CS0_LAT LATB
#define CS0_TRIS TRISB






; bits in FLAGS
cblock 0x0
	GET_REAL_VOLTAGE : 1
	INTERRUPT_COMPLETE : 1
	GOT_PACKET : 1
endc


; low clockspeed so the buck converter can work
#define CLOCKSPEED 2000000
#define BUFFER_SIZE 8
#define BAUD 9600
#define BAUD_RATE_CODE (CLOCKSPEED / (BAUD * 4) - 1)
#define SYNC_CODE 0xe5
#define PERIOD 255
#define PWM_TRIS TRISB
#define PWM_PIN 3
#define PWM_LAT LATB




	VARSTART H'00', H'100'
	VARADD FLAGS, 1
; user setting
	VARADD TARGET_VOLTAGE, 2
; real voltage
	VARADD REAL_VOLTAGE, 2
	VARADD UART_STATE, 2
	
	
	VARADD BUFFER, BUFFER_SIZE
	VARADD NEXT_BUFFER, BUFFER_SIZE
	VARADD BUFFER_PTR, 2
	VARADD THROTTLE, 2
	VARADD STEERING, 2
	VARADD TEMP, 2
	VARADD TEMP1, 1
	VARADD TEMP2, 1
	CHKSUM_VARS



	ORG RESETVECTOR
	goto start

	ORG INTVECTORHI
	goto interrupt_handler

	ORG INTVECTORLO
	goto interrupt_handler




#include "cc1101.s"
#include "chksum.s"



start:
	BANKSEL H'00'
	SET_REGISTER OSCCON, B'00000000'
; pin modes
; pin mode: 1 = digital  0 = analog
	SET_REGISTER ADCON1, B'11001111'
	SET_REGISTER ADCON0, B'00010001'
	SET_REGISTER ADCON2, B'00111110'

	SET_REGISTER16 UART_STATE, sync_code1
	SET_REGISTER TXSTA, B'00000100'
	SET_REGISTER RCSTA, B'10010000'
	SET_REGISTER BAUDCTL, B'00001000'
	SET_REGISTER16 SPBRG, BAUD_RATE_CODE
	bcf PIR1, RCIF
	bsf PIE1, RCIE


	
	bsf PWM_TRIS, PWM_PIN
	bcf PWM_LAT, PWM_PIN
; period
	SET_REGISTER PR2, PERIOD
; PWM timer
; postscaler not used
	SET_REGISTER T2CON, B'00000111'
	SET_REGISTER CCP1CON, B'00001100'
	SET_REGISTER CCPR1L, PERIOD / 2


	bsf ADCON0, 1
	clrf FLAGS
	CLEAR_REGISTER16 THROTTLE
	SET_REGISTER16 STEERING, 0x8000
	CLEAR_REGISTER16 TARGET_VOLTAGE
	CLEAR_REGISTER16 REAL_VOLTAGE
	SET_REGISTER16 BUFFER_PTR, NEXT_BUFFER

	bcf SDO_LAT, SDO_PIN
	bcf SDO_TRIS, SDO_PIN

	bcf SCK_LAT, SCK_PIN
	bcf SCK_TRIS, SCK_PIN
	
	bsf CS0_LAT, CS0_PIN
	bcf CS0_TRIS, CS0_PIN







	call reset_chip

	CC1101_RECEIVER

	SET_REGISTER OSCCON, B'01010000'

; enable interrupts
	bsf INTCON, PEIE
	bsf INTCON, GIE




loop:
	clrwdt
	btfsc PIR1, ADIF
	call handle_analog
	
	btfsc FLAGS, GOT_PACKET
	call handle_packet
	bra loop






interrupt_handler:
	clrwdt
	bsf FLAGS, INTERRUPT_COMPLETE

	btfsc PIR1, RCIF
	call handle_uart



; loop again if interrupt was handled
	btfss FLAGS, INTERRUPT_COMPLETE
	bra interrupt_handler
; return after popping context from fast register stack
		retfie FAST






handle_uart:
	bcf FLAGS, INTERRUPT_COMPLETE
	SET_PC_REG UART_STATE


sync_code1:
	SKIP_EQUAL_LITERAL RCREG, 0xff
	return
		SET_REGISTER16 UART_STATE, sync_code2
		return

sync_code2:
	SET_REGISTER16 UART_STATE, sync_code1
	SKIP_EQUAL_LITERAL RCREG, 0x2d
	return
		SET_REGISTER16 UART_STATE, sync_code3
		return

sync_code3:
	SET_REGISTER16 UART_STATE, sync_code1
	SKIP_EQUAL_LITERAL RCREG, 0xd4
	return
		SET_REGISTER16 UART_STATE, get_data
		return

get_data:
	SET_POINTER0_REG BUFFER_PTR
	COPY_REGISTER POSTINC0, RCREG
	COPY_REGISTER16 BUFFER_PTR, POINTER0
	SKIP_GREATEREQUAL_LITERAL BUFFER_PTR, NEXT_BUFFER + BUFFER_SIZE
	return

		bsf FLAGS, GOT_PACKET
		COPY_REGISTER BUFFER + 0, NEXT_BUFFER + 0
		COPY_REGISTER BUFFER + 1, NEXT_BUFFER + 1
		COPY_REGISTER BUFFER + 2, NEXT_BUFFER + 2
		COPY_REGISTER BUFFER + 3, NEXT_BUFFER + 3
		COPY_REGISTER BUFFER + 4, NEXT_BUFFER + 4
		COPY_REGISTER BUFFER + 5, NEXT_BUFFER + 5
		COPY_REGISTER BUFFER + 6, NEXT_BUFFER + 6
		COPY_REGISTER BUFFER + 7, NEXT_BUFFER + 7
		SET_REGISTER16 BUFFER_PTR, NEXT_BUFFER
		return



handle_packet:
	bcf FLAGS, GOT_PACKET
	GET_CHKSUM TEMP, BUFFER, BUFFER_SIZE - 2
	
	SKIP_EQUAL TEMP + 0, BUFFER + BUFFER_SIZE - 2
	return
	SKIP_EQUAL TEMP + 1, BUFFER + BUFFER_SIZE - 1
	return

		COPY_REGISTER16 THROTTLE, BUFFER + 2
		COPY_REGISTER16 STEERING, BUFFER + 4
		return
						



handle_analog:
	bcf PIR1, ADIF
	btfsc FLAGS, GET_REAL_VOLTAGE
	bra handle_analog2
	
		SET_REGISTER ADCON0, B'00010101'
		bsf FLAGS, GET_REAL_VOLTAGE
		COPY_REGISTER16 TARGET_VOLTAGE, ADRESL
; convert to target ADC value for real voltage
; ADC range = 36041 - 41189
		bcf STATUS, C
		rrcf TARGET_VOLTAGE + 1, F
		rrcf TARGET_VOLTAGE + 0, F
;		bcf STATUS, C
;		rrcf TARGET_VOLTAGE + 1, F
;		rrcf TARGET_VOLTAGE + 0, F
;		bcf STATUS, C
;		rrcf TARGET_VOLTAGE + 1, F
;		rrcf TARGET_VOLTAGE + 0, F

		ADD_LITERAL16 TARGET_VOLTAGE, 0x8000

		bsf ADCON0, 1
		return

handle_analog2:
	SET_REGISTER ADCON0, B'00010001'
	bcf FLAGS, GET_REAL_VOLTAGE
	COPY_REGISTER16 REAL_VOLTAGE, ADRESL
	bsf ADCON0, 1


	SKIP_GREATEREQUAL16 REAL_VOLTAGE, TARGET_VOLTAGE
	bra handle_analog3
		bsf PWM_TRIS, PWM_PIN
		return

handle_analog3:
	bcf PWM_TRIS, PWM_PIN
	return







END











