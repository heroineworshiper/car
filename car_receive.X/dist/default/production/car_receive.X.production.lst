

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Oct 30 02:58:01 2020

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F14K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     
    28                           ; Version 1.45
    29                           ; Generated 16/11/2017 GMT
    30                           ; 
    31                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC18F14K50 Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     
    63                           	psect	idataCOMRAM
    64  0006C0                     __pidataCOMRAM:
    65                           	opt stack 0
    66                           
    67                           ;initializer for _channels
    68  0006C0  00A0               	dw	160
    69  0006C2  0EFF               	dw	3839
    70  0006C4  07CF               	dw	1999
    71  0006C6  0437               	dw	1079
    72  0006C8  0B67               	dw	2919
    73  0006CA  026B               	dw	619
    74  0006CC  0D33               	dw	3379
    75  0006CE  0603               	dw	1539
    76  0006D0  099B               	dw	2459
    77                           
    78                           	psect	smallconst
    79  000300                     __psmallconst:
    80                           	opt stack 0
    81  000300  00                 	db	0
    82  000301                     _PACKET_KEY:
    83                           	opt stack 0
    84  000301  FF                 	db	255
    85  000302  E7                 	db	231
    86  000303  A9                 	db	169
    87  000304  38                 	db	56
    88  000305  33                 	db	51
    89  000306  30                 	db	48
    90  000307  9E                 	db	158
    91  000308  08                 	db	8
    92  000309                     __end_of_PACKET_KEY:
    93                           	opt stack 0
    94  000309  00                 	db	0	; dummy byte at the end
    95  0000                     
    96                           	psect	nvCOMRAM
    97  000046                     __pnvCOMRAM:
    98                           	opt stack 0
    99  000046                     _receive_state:
   100                           	opt stack 0
   101  000046                     	ds	2
   102  0000                     _TMR0	set	4054
   103  0000                     _TMR1	set	4046
   104  0000                     _RCREG	set	4014
   105  0000                     _INTCON	set	4082
   106  0000                     _T0CON	set	4053
   107  0000                     _ANSELH	set	3967
   108  0000                     _ANSEL	set	3966
   109  0000                     _OSCCON	set	4051
   110  0000                     _INTCONbits	set	4082
   111  0000                     _TXREG	set	4013
   112  0000                     _PIE1bits	set	3997
   113  0000                     _SPBRG	set	4015
   114  0000                     _BAUDCON	set	4024
   115  0000                     _RCSTA	set	4011
   116  0000                     _TXSTA	set	4012
   117  0000                     _PIR1bits	set	3998
   118  0000                     _T1CON	set	4045
   119  0000                     _TRISCbits	set	3988
   120  0000                     _TRISBbits	set	3987
   121  0000                     _LATCbits	set	3979
   122  0000                     _LATBbits	set	3978
   123                           
   124                           ; #config settings
   125  0000                     
   126                           	psect	cinit
   127  000600                     __pcinit:
   128                           	opt stack 0
   129  000600                     start_initialization:
   130                           	opt stack 0
   131  000600                     __initialization:
   132                           	opt stack 0
   133                           
   134                           ; Initialize objects allocated to COMRAM (18 bytes)
   135                           ; load TBLPTR registers with __pidataCOMRAM
   136  000600  0EC0               	movlw	low __pidataCOMRAM
   137  000602  6EF6               	movwf	tblptrl,c
   138  000604  0E06               	movlw	high __pidataCOMRAM
   139  000606  6EF7               	movwf	tblptrh,c
   140  000608  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   141  00060A  6EF8               	movwf	tblptru,c
   142  00060C  EE00  F034         	lfsr	0,__pdataCOMRAM
   143  000610  EE10 F012          	lfsr	1,18
   144  000614                     copy_data0:
   145  000614  0009               	tblrd		*+
   146  000616  CFF5 FFEE          	movff	tablat,postinc0
   147  00061A  50E5               	movf	postdec1,w,c
   148  00061C  50E1               	movf	fsr1l,w,c
   149  00061E  E1FA               	bnz	copy_data0
   150                           
   151                           ; Clear objects allocated to COMRAM (24 bytes)
   152  000620  EE00  F01C         	lfsr	0,__pbssCOMRAM
   153  000624  0E18               	movlw	24
   154  000626                     clear_0:
   155  000626  6AEE               	clrf	postinc0,c
   156  000628  06E8               	decf	wreg,f,c
   157  00062A  E1FD               	bnz	clear_0
   158  00062C                     end_of_initialization:
   159                           	opt stack 0
   160  00062C                     __end_of__initialization:
   161                           	opt stack 0
   162  00062C  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   163  00062E  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   164  000630  0E00               	movlw	low (__Lmediumconst shr (0+16))
   165  000632  6EF8               	movwf	tblptru,c
   166  000634  0100               	movlb	0
   167  000636  EF72  F002         	goto	_main	;jump to C main() function
   168                           tblptru	equ	0xFF8
   169                           tblptrh	equ	0xFF7
   170                           tblptrl	equ	0xFF6
   171                           tablat	equ	0xFF5
   172                           postinc0	equ	0xFEE
   173                           wreg	equ	0xFE8
   174                           postdec1	equ	0xFE5
   175                           fsr1l	equ	0xFE1
   176                           
   177                           	psect	bssCOMRAM
   178  00001C                     __pbssCOMRAM:
   179                           	opt stack 0
   180  00001C                     _serial_data:
   181                           	opt stack 0
   182  00001C                     	ds	12
   183  000028                     _tick:
   184                           	opt stack 0
   185  000028                     	ds	4
   186  00002C                     _start_time:
   187                           	opt stack 0
   188  00002C                     	ds	2
   189  00002E                     _data_offset:
   190                           	opt stack 0
   191  00002E                     	ds	1
   192  00002F                     _key_offset:
   193                           	opt stack 0
   194  00002F                     	ds	1
   195  000030                     _serial_in:
   196                           	opt stack 0
   197  000030                     	ds	1
   198  000031                     _missed_packets:
   199                           	opt stack 0
   200  000031                     	ds	1
   201  000032                     _current_channel:
   202                           	opt stack 0
   203  000032                     	ds	1
   204  000033                     _flags:
   205                           	opt stack 0
   206  000033                     	ds	1
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           postdec1	equ	0xFE5
   214                           fsr1l	equ	0xFE1
   215                           
   216                           	psect	dataCOMRAM
   217  000034                     __pdataCOMRAM:
   218                           	opt stack 0
   219  000034                     _channels:
   220                           	opt stack 0
   221  000034                     	ds	18
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           tblptrl	equ	0xFF6
   225                           tablat	equ	0xFF5
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           postdec1	equ	0xFE5
   229                           fsr1l	equ	0xFE1
   230                           
   231                           	psect	cstackBANK0
   232  000060                     __pcstackBANK0:
   233                           	opt stack 0
   234  000060                     write_serial@value:
   235                           	opt stack 0
   236  000060                     write_radio@data:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x0
   240  000060                     	ds	2
   241  000062                     ??_write_radio:
   242                           
   243                           ; 1 bytes @ 0x2
   244  000062                     	ds	1
   245  000063                     write_radio@i:
   246                           	opt stack 0
   247                           
   248                           ; 1 bytes @ 0x3
   249  000063                     	ds	1
   250  000064                     ??_radio_on:
   251                           
   252                           ; 1 bytes @ 0x4
   253  000064                     	ds	2
   254  000066                     tblptru	equ	0xFF8
   255                           tblptrh	equ	0xFF7
   256                           tblptrl	equ	0xFF6
   257                           tablat	equ	0xFF5
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           postdec1	equ	0xFE5
   261                           fsr1l	equ	0xFE1
   262                           
   263                           ; 1 bytes @ 0x6
   264                           
   265                           	psect	cstackCOMRAM
   266  000001                     __pcstackCOMRAM:
   267                           	opt stack 0
   268  000001                     ??_get_data:
   269  000001                     i2write_radio@data:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x0
   273  000001                     	ds	2
   274  000003                     ??i2_write_radio:
   275                           
   276                           ; 1 bytes @ 0x2
   277  000003                     	ds	1
   278  000004                     i2write_radio@i:
   279                           	opt stack 0
   280  000004                     get_data@next_hop:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0x3
   284  000004                     	ds	1
   285  000005                     ??_next_channel:
   286                           
   287                           ; 1 bytes @ 0x4
   288  000005                     	ds	1
   289  000006                     get_data@current_time:
   290                           	opt stack 0
   291                           
   292                           ; 2 bytes @ 0x5
   293  000006                     	ds	2
   294  000008                     get_data@failed:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x7
   298  000008                     	ds	1
   299  000009                     get_data@i:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x8
   303  000009                     	ds	1
   304  00000A                     ??_isr:
   305                           
   306                           ; 1 bytes @ 0x9
   307  00000A                     	ds	18
   308                           tblptru	equ	0xFF8
   309                           tblptrh	equ	0xFF7
   310                           tblptrl	equ	0xFF6
   311                           tablat	equ	0xFF5
   312                           postinc0	equ	0xFEE
   313                           wreg	equ	0xFE8
   314                           postdec1	equ	0xFE5
   315                           fsr1l	equ	0xFE1
   316                           
   317 ;;
   318 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   319 ;;
   320 ;; *************** function _main *****************
   321 ;; Defined at:
   322 ;;		line 408 in file "receiver.c"
   323 ;; Parameters:    Size  Location     Type
   324 ;;		None
   325 ;; Auto vars:     Size  Location     Type
   326 ;;		None
   327 ;; Return value:  Size  Location     Type
   328 ;;                  1    wreg      void 
   329 ;; Registers used:
   330 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   331 ;; Tracked objects:
   332 ;;		On entry : 0/0
   333 ;;		On exit  : 0/0
   334 ;;		Unchanged: 0/0
   335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   336 ;;      Params:         0       0       0       0
   337 ;;      Locals:         0       0       0       0
   338 ;;      Temps:          0       0       0       0
   339 ;;      Totals:         0       0       0       0
   340 ;;Total ram usage:        0 bytes
   341 ;; Hardware stack levels required when called:    5
   342 ;; This function calls:
   343 ;;		_radio_on
   344 ;;		_serial_on
   345 ;;		_write_serial
   346 ;; This function is called by:
   347 ;;		Startup code after reset
   348 ;; This function uses a non-reentrant model
   349 ;;
   350                           
   351                           	psect	text0
   352  0004E4                     __ptext0:
   353                           	opt stack 0
   354  0004E4                     _main:
   355                           	opt stack 26
   356                           
   357                           ;receiver.c: 410: OSCCON = 0b11100000;
   358                           
   359                           ;incstack = 0
   360  0004E4  0EE0               	movlw	224
   361  0004E6  6ED3               	movwf	4051,c	;volatile
   362                           
   363                           ;receiver.c: 414: LATCbits.LATC5 = 0;
   364  0004E8  9A8B               	bcf	3979,5,c	;volatile
   365                           
   366                           ;receiver.c: 415: TRISCbits.TRISC5 = 0;
   367  0004EA  9A94               	bcf	3988,5,c	;volatile
   368                           
   369                           ;receiver.c: 416: ANSEL = 0b00000000;
   370  0004EC  0E00               	movlw	0
   371  0004EE  6E7E               	movwf	3966,c	;volatile
   372                           
   373                           ;receiver.c: 417: ANSELH = 0b00000000;
   374  0004F0  0E00               	movlw	0
   375  0004F2  6E7F               	movwf	3967,c	;volatile
   376                           
   377                           ;receiver.c: 419: flags.value = 0;
   378  0004F4  0E00               	movlw	0
   379  0004F6  6E33               	movwf	_flags,c
   380                           
   381                           ;receiver.c: 420: tick = 0;
   382  0004F8  0E00               	movlw	0
   383  0004FA  6E28               	movwf	_tick,c
   384  0004FC  0E00               	movlw	0
   385  0004FE  6E29               	movwf	_tick+1,c
   386  000500  0E00               	movlw	0
   387  000502  6E2A               	movwf	_tick+2,c
   388  000504  0E00               	movlw	0
   389  000506  6E2B               	movwf	_tick+3,c
   390                           
   391                           ;receiver.c: 421: key_offset = 0;
   392  000508  0E00               	movlw	0
   393  00050A  6E2F               	movwf	_key_offset,c
   394                           
   395                           ;receiver.c: 422: receive_state = get_key;
   396  00050C  0E54               	movlw	low _get_key
   397  00050E  6E46               	movwf	_receive_state,c
   398  000510  0E05               	movlw	high _get_key
   399  000512  6E47               	movwf	_receive_state+1,c
   400                           
   401                           ;receiver.c: 424: radio_on();
   402  000514  EC03  F002         	call	_radio_on	;wreg free
   403                           
   404                           ;receiver.c: 425: serial_on();
   405  000518  EC55  F003         	call	_serial_on	;wreg free
   406                           
   407                           ;receiver.c: 429: T0CON = 0b10000100;
   408  00051C  0E84               	movlw	132
   409  00051E  6ED5               	movwf	4053,c	;volatile
   410                           
   411                           ;receiver.c: 430: TMR0 = -(32000000 / 4 / 32 / 25);
   412  000520  0ED8               	movlw	216
   413  000522  6ED7               	movwf	4055,c	;volatile
   414  000524  0EF0               	movlw	240
   415  000526  6ED6               	movwf	4054,c	;volatile
   416                           
   417                           ;receiver.c: 432: INTCON = 0b11100000;
   418  000528  0EE0               	movlw	224
   419  00052A  6EF2               	movwf	intcon,c	;volatile
   420  00052C                     l115:
   421  00052C  0004               	clrwdt		;# 
   422                           
   423                           ;receiver.c: 438: if(flags.got_packet)
   424  00052E  A433               	btfss	_flags,2,c
   425  000530  D7FD               	goto	l115
   426                           
   427                           ;receiver.c: 439: {
   428                           ;receiver.c: 440: flags.got_packet = 0;
   429  000532  9433               	bcf	_flags,2,c
   430                           
   431                           ;receiver.c: 441: write_serial(0xff);
   432  000534  0EFF               	movlw	255
   433  000536  EC69  F003         	call	_write_serial
   434                           
   435                           ;receiver.c: 442: write_serial(0xe7);
   436  00053A  0EE7               	movlw	231
   437  00053C  EC69  F003         	call	_write_serial
   438                           
   439                           ;receiver.c: 443: write_serial(serial_data[0]);
   440  000540  501C               	movf	_serial_data,w,c
   441  000542  EC69  F003         	call	_write_serial
   442                           
   443                           ;receiver.c: 444: write_serial(serial_data[1]);
   444  000546  501D               	movf	_serial_data+1,w,c
   445  000548  EC69  F003         	call	_write_serial
   446                           
   447                           ;receiver.c: 445: write_serial(serial_data[2]);
   448  00054C  501E               	movf	_serial_data+2,w,c
   449  00054E  EC69  F003         	call	_write_serial
   450  000552  D7EC               	goto	l115
   451  000554                     __end_of_main:
   452                           	opt stack 0
   453                           tblptru	equ	0xFF8
   454                           tblptrh	equ	0xFF7
   455                           tblptrl	equ	0xFF6
   456                           tablat	equ	0xFF5
   457                           intcon	equ	0xFF2
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           postdec1	equ	0xFE5
   461                           fsr1l	equ	0xFE1
   462                           
   463 ;; *************** function _write_serial *****************
   464 ;; Defined at:
   465 ;;		line 324 in file "receiver.c"
   466 ;; Parameters:    Size  Location     Type
   467 ;;  value           1    wreg     unsigned char 
   468 ;; Auto vars:     Size  Location     Type
   469 ;;  value           1    0[BANK0 ] unsigned char 
   470 ;; Return value:  Size  Location     Type
   471 ;;                  1    wreg      void 
   472 ;; Registers used:
   473 ;;		wreg
   474 ;; Tracked objects:
   475 ;;		On entry : 0/0
   476 ;;		On exit  : 0/0
   477 ;;		Unchanged: 0/0
   478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   479 ;;      Params:         0       0       0       0
   480 ;;      Locals:         0       1       0       0
   481 ;;      Temps:          0       0       0       0
   482 ;;      Totals:         0       1       0       0
   483 ;;Total ram usage:        1 bytes
   484 ;; Hardware stack levels used:    1
   485 ;; Hardware stack levels required when called:    3
   486 ;; This function calls:
   487 ;;		Nothing
   488 ;; This function is called by:
   489 ;;		_main
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text1
   494  0006D2                     __ptext1:
   495                           	opt stack 0
   496  0006D2                     _write_serial:
   497                           	opt stack 27
   498                           
   499                           ;incstack = 0
   500                           ;write_serial@value stored from wreg
   501  0006D2  0100               	movlb	0	; () banked
   502  0006D4  6F60               	movwf	write_serial@value& (0+255),b
   503  0006D6  0004               	clrwdt		;# 
   504  0006D8                     
   505                           ;receiver.c: 329: {
   506  0006D8  A89E               	btfss	3998,4,c	;volatile
   507  0006DA  D7FE               	goto	l90
   508                           
   509                           ;receiver.c: 330: }
   510                           ;receiver.c: 332: TXREG = value;
   511  0006DC  C060  FFAD         	movff	write_serial@value,4013	;volatile
   512  0006E0  0012               	return		;funcret
   513  0006E2                     __end_of_write_serial:
   514                           	opt stack 0
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           intcon	equ	0xFF2
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525 ;; *************** function _serial_on *****************
   526 ;; Defined at:
   527 ;;		line 312 in file "receiver.c"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;		None
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, status,2
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   541 ;;      Params:         0       0       0       0
   542 ;;      Locals:         0       0       0       0
   543 ;;      Temps:          0       0       0       0
   544 ;;      Totals:         0       0       0       0
   545 ;;Total ram usage:        0 bytes
   546 ;; Hardware stack levels used:    1
   547 ;; Hardware stack levels required when called:    3
   548 ;; This function calls:
   549 ;;		Nothing
   550 ;; This function is called by:
   551 ;;		_main
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           	psect	text2
   556  0006AA                     __ptext2:
   557                           	opt stack 0
   558  0006AA                     _serial_on:
   559                           	opt stack 27
   560                           
   561                           ;receiver.c: 315: TXSTA = 0b00100100;
   562                           
   563                           ;incstack = 0
   564  0006AA  0E24               	movlw	36
   565  0006AC  6EAC               	movwf	4012,c	;volatile
   566                           
   567                           ;receiver.c: 316: RCSTA = 0b10010000;
   568  0006AE  0E90               	movlw	144
   569  0006B0  6EAB               	movwf	4011,c	;volatile
   570                           
   571                           ;receiver.c: 317: BAUDCON = 0b00001000;
   572  0006B2  0E08               	movlw	8
   573  0006B4  6EB8               	movwf	4024,c	;volatile
   574                           
   575                           ;receiver.c: 319: SPBRG = 32000000 / 4 / 100000 - 1;
   576  0006B6  0E4F               	movlw	79
   577  0006B8  6EAF               	movwf	4015,c	;volatile
   578                           
   579                           ;receiver.c: 320: PIR1bits.RCIF = 0;
   580  0006BA  9A9E               	bcf	3998,5,c	;volatile
   581                           
   582                           ;receiver.c: 321: PIE1bits.RCIE = 1;
   583  0006BC  8A9D               	bsf	3997,5,c	;volatile
   584  0006BE  0012               	return		;funcret
   585  0006C0                     __end_of_serial_on:
   586                           	opt stack 0
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           tblptrl	equ	0xFF6
   590                           tablat	equ	0xFF5
   591                           intcon	equ	0xFF2
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           postdec1	equ	0xFE5
   595                           fsr1l	equ	0xFE1
   596                           
   597 ;; *************** function _radio_on *****************
   598 ;; Defined at:
   599 ;;		line 248 in file "receiver.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;		None
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   613 ;;      Params:         0       0       0       0
   614 ;;      Locals:         0       0       0       0
   615 ;;      Temps:          0       2       0       0
   616 ;;      Totals:         0       2       0       0
   617 ;;Total ram usage:        2 bytes
   618 ;; Hardware stack levels used:    1
   619 ;; Hardware stack levels required when called:    4
   620 ;; This function calls:
   621 ;;		_write_radio
   622 ;; This function is called by:
   623 ;;		_main
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           	psect	text3
   628  000406                     __ptext3:
   629                           	opt stack 0
   630  000406                     _radio_on:
   631                           	opt stack 26
   632                           
   633                           ;receiver.c: 251: LATBbits.LATB4 = 1;
   634                           
   635                           ;incstack = 0
   636  000406  888A               	bsf	3978,4,c	;volatile
   637                           
   638                           ;receiver.c: 252: TRISBbits.TRISB4 = 0;
   639  000408  9893               	bcf	3987,4,c	;volatile
   640                           
   641                           ;receiver.c: 254: LATCbits.LATC1 = 0;
   642  00040A  928B               	bcf	3979,1,c	;volatile
   643                           
   644                           ;receiver.c: 255: TRISCbits.TRISC1 = 0;
   645  00040C  9294               	bcf	3988,1,c	;volatile
   646                           
   647                           ;receiver.c: 257: LATCbits.LATC2 = 0;
   648  00040E  948B               	bcf	3979,2,c	;volatile
   649                           
   650                           ;receiver.c: 258: TRISCbits.TRISC2 = 0;
   651  000410  9494               	bcf	3988,2,c	;volatile
   652                           
   653                           ;receiver.c: 261: T1CON = 0b10100001;
   654  000412  0EA1               	movlw	161
   655  000414  6ECD               	movwf	4045,c	;volatile
   656                           
   657                           ;receiver.c: 262: TMR1 = 0;
   658  000416  0E00               	movlw	0
   659  000418  6ECF               	movwf	4047,c	;volatile
   660  00041A  0E00               	movlw	0
   661  00041C  6ECE               	movwf	4046,c	;volatile
   662                           
   663                           ;receiver.c: 263: PIR1bits.TMR1IF = 0;
   664  00041E  909E               	bcf	3998,0,c	;volatile
   665                           
   666                           ;receiver.c: 264: while(!PIR1bits.TMR1IF)
   667  000420  D001               	goto	l76
   668  000422                     l77:
   669  000422  0004               	clrwdt		;# 
   670  000424                     l76:
   671  000424  A09E               	btfss	3998,0,c	;volatile
   672  000426  D7FD               	goto	l77
   673                           
   674                           ;receiver.c: 267: }
   675                           ;receiver.c: 268: T1CON = 0b10000000;
   676  000428  0E80               	movlw	128
   677  00042A  6ECD               	movwf	4045,c	;volatile
   678                           
   679                           ;receiver.c: 271: write_radio(0xCA81);
   680  00042C  0ECA               	movlw	202
   681  00042E  0100               	movlb	0	; () banked
   682  000430  6F61               	movwf	(write_radio@data+1)& (0+255),b
   683  000432  0E81               	movlw	129
   684  000434  6F60               	movwf	write_radio@data& (0+255),b
   685  000436  ECE1  F002         	call	_write_radio	;wreg free
   686                           
   687                           ;receiver.c: 273: write_radio(0xCA81 | 0x0002);
   688  00043A  0ECA               	movlw	202
   689  00043C  0100               	movlb	0	; () banked
   690  00043E  6F61               	movwf	(write_radio@data+1)& (0+255),b
   691  000440  0E83               	movlw	131
   692  000442  6F60               	movwf	write_radio@data& (0+255),b
   693  000444  ECE1  F002         	call	_write_radio	;wreg free
   694                           
   695                           ;receiver.c: 274: write_radio((0x8000 | 0x0003 | 0x0030));
   696  000448  0E80               	movlw	128
   697  00044A  0100               	movlb	0	; () banked
   698  00044C  6F61               	movwf	(write_radio@data+1)& (0+255),b
   699  00044E  0E33               	movlw	51
   700  000450  6F60               	movwf	write_radio@data& (0+255),b
   701  000452  ECE1  F002         	call	_write_radio	;wreg free
   702                           
   703                           ;receiver.c: 275: write_radio(0xc4d7);
   704  000456  0EC4               	movlw	196
   705  000458  0100               	movlb	0	; () banked
   706  00045A  6F61               	movwf	(write_radio@data+1)& (0+255),b
   707  00045C  0ED7               	movlw	215
   708  00045E  6F60               	movwf	write_radio@data& (0+255),b
   709  000460  ECE1  F002         	call	_write_radio	;wreg free
   710                           
   711                           ;receiver.c: 276: write_radio((0xA000 | (channels[current_channel])));
   712  000464  5032               	movf	_current_channel,w,c
   713  000466  0D02               	mullw	2
   714  000468  0E34               	movlw	low _channels
   715  00046A  24F3               	addwf	prodl,w,c
   716  00046C  6ED9               	movwf	fsr2l,c
   717  00046E  0E00               	movlw	high _channels
   718  000470  20F4               	addwfc	prodh,w,c
   719  000472  6EDA               	movwf	fsr2h,c
   720  000474  CFDE F064          	movff	postinc2,??_radio_on
   721  000478  CFDD F065          	movff	postdec2,??_radio_on+1
   722  00047C  0E00               	movlw	0
   723  00047E  0100               	movlb	0	; () banked
   724  000480  1164               	iorwf	??_radio_on& (0+255),w,b
   725  000482  6F60               	movwf	write_radio@data& (0+255),b
   726  000484  0EA0               	movlw	160
   727  000486  1165               	iorwf	(??_radio_on+1)& (0+255),w,b
   728  000488  6F61               	movwf	(write_radio@data+1)& (0+255),b
   729  00048A  ECE1  F002         	call	_write_radio	;wreg free
   730                           
   731                           ;receiver.c: 277: write_radio((0xC600 | 0 | 3));
   732  00048E  0EC6               	movlw	198
   733  000490  0100               	movlb	0	; () banked
   734  000492  6F61               	movwf	(write_radio@data+1)& (0+255),b
   735  000494  0E03               	movlw	3
   736  000496  6F60               	movwf	write_radio@data& (0+255),b
   737  000498  ECE1  F002         	call	_write_radio	;wreg free
   738                           
   739                           ;receiver.c: 278: write_radio(0x8201);
   740  00049C  0E82               	movlw	130
   741  00049E  0100               	movlb	0	; () banked
   742  0004A0  6F61               	movwf	(write_radio@data+1)& (0+255),b
   743  0004A2  0E01               	movlw	1
   744  0004A4  6F60               	movwf	write_radio@data& (0+255),b
   745  0004A6  ECE1  F002         	call	_write_radio	;wreg free
   746                           
   747                           ;receiver.c: 279: write_radio(0x9420);
   748  0004AA  0E94               	movlw	148
   749  0004AC  0100               	movlb	0	; () banked
   750  0004AE  6F61               	movwf	(write_radio@data+1)& (0+255),b
   751  0004B0  0E20               	movlw	32
   752  0004B2  6F60               	movwf	write_radio@data& (0+255),b
   753  0004B4  ECE1  F002         	call	_write_radio	;wreg free
   754                           
   755                           ;receiver.c: 280: write_radio(0x98f0);
   756  0004B8  0E98               	movlw	152
   757  0004BA  0100               	movlb	0	; () banked
   758  0004BC  6F61               	movwf	(write_radio@data+1)& (0+255),b
   759  0004BE  0EF0               	movlw	240
   760  0004C0  6F60               	movwf	write_radio@data& (0+255),b
   761  0004C2  ECE1  F002         	call	_write_radio	;wreg free
   762                           
   763                           ;receiver.c: 281: write_radio(0xc23c);
   764  0004C6  0EC2               	movlw	194
   765  0004C8  0100               	movlb	0	; () banked
   766  0004CA  6F61               	movwf	(write_radio@data+1)& (0+255),b
   767  0004CC  0E3C               	movlw	60
   768  0004CE  6F60               	movwf	write_radio@data& (0+255),b
   769  0004D0  ECE1  F002         	call	_write_radio	;wreg free
   770                           
   771                           ;receiver.c: 298: write_radio(0x8201 | 0x0080);
   772  0004D4  0E82               	movlw	130
   773  0004D6  0100               	movlb	0	; () banked
   774  0004D8  6F61               	movwf	(write_radio@data+1)& (0+255),b
   775  0004DA  0E81               	movlw	129
   776  0004DC  6F60               	movwf	write_radio@data& (0+255),b
   777  0004DE  ECE1  F002         	call	_write_radio	;wreg free
   778  0004E2  0012               	return		;funcret
   779  0004E4                     __end_of_radio_on:
   780                           	opt stack 0
   781                           tblptru	equ	0xFF8
   782                           tblptrh	equ	0xFF7
   783                           tblptrl	equ	0xFF6
   784                           tablat	equ	0xFF5
   785                           prodh	equ	0xFF4
   786                           prodl	equ	0xFF3
   787                           intcon	equ	0xFF2
   788                           postinc0	equ	0xFEE
   789                           wreg	equ	0xFE8
   790                           postdec1	equ	0xFE5
   791                           fsr1l	equ	0xFE1
   792                           postinc2	equ	0xFDE
   793                           postdec2	equ	0xFDD
   794                           fsr2h	equ	0xFDA
   795                           fsr2l	equ	0xFD9
   796                           
   797 ;; *************** function _write_radio *****************
   798 ;; Defined at:
   799 ;;		line 232 in file "receiver.c"
   800 ;; Parameters:    Size  Location     Type
   801 ;;  data            2    0[BANK0 ] unsigned int 
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  i               1    3[BANK0 ] unsigned char 
   804 ;; Return value:  Size  Location     Type
   805 ;;                  1    wreg      void 
   806 ;; Registers used:
   807 ;;		wreg, status,2, status,0
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   813 ;;      Params:         0       2       0       0
   814 ;;      Locals:         0       1       0       0
   815 ;;      Temps:          0       1       0       0
   816 ;;      Totals:         0       4       0       0
   817 ;;Total ram usage:        4 bytes
   818 ;; Hardware stack levels used:    1
   819 ;; Hardware stack levels required when called:    3
   820 ;; This function calls:
   821 ;;		Nothing
   822 ;; This function is called by:
   823 ;;		_radio_on
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           	psect	text4
   828  0005C2                     __ptext4:
   829                           	opt stack 0
   830  0005C2                     _write_radio:
   831                           	opt stack 26
   832                           
   833                           ;incstack = 0
   834  0005C2  0004               	clrwdt		;# 
   835                           
   836                           ;receiver.c: 236: LATBbits.LATB4 = 0;
   837  0005C4  988A               	bcf	3978,4,c	;volatile
   838                           
   839                           ;receiver.c: 237: uint8_t i;
   840                           ;receiver.c: 238: for(i = 0; i < 16; i++)
   841  0005C6  0E00               	movlw	0
   842  0005C8  0100               	movlb	0	; () banked
   843  0005CA  6F63               	movwf	write_radio@i& (0+255),b
   844  0005CC                     l1118:
   845                           
   846                           ; BSR set to: 0
   847  0005CC  0E0F               	movlw	15
   848  0005CE  6563               	cpfsgt	write_radio@i& (0+255),b
   849  0005D0  D001               	goto	l71
   850  0005D2  D014               	goto	u570
   851  0005D4                     l71:
   852                           
   853                           ; BSR set to: 0
   854                           ;receiver.c: 239: {
   855                           ;receiver.c: 240: LATCbits.LATC1 = (uint8_t)((data & 0x8000) ? 1 : 0);
   856                           
   857                           ; BSR set to: 0
   858  0005D4  AF61               	btfss	(write_radio@data+1)& (0+255),7,b
   859  0005D6  D003               	goto	u550
   860  0005D8  6B62               	clrf	??_write_radio& (0+255),b
   861  0005DA  2B62               	incf	??_write_radio& (0+255),f,b
   862  0005DC  D002               	goto	u568
   863  0005DE                     u550:
   864  0005DE  0100               	movlb	0	; () banked
   865  0005E0  6B62               	clrf	??_write_radio& (0+255),b
   866  0005E2                     u568:
   867  0005E2  4762               	rlncf	??_write_radio& (0+255),f,b
   868  0005E4  508B               	movf	3979,w,c	;volatile
   869  0005E6  1962               	xorwf	??_write_radio& (0+255),w,b
   870  0005E8  0BFD               	andlw	-3
   871  0005EA  1962               	xorwf	??_write_radio& (0+255),w,b
   872  0005EC  6E8B               	movwf	3979,c	;volatile
   873                           
   874                           ; BSR set to: 0
   875                           ;receiver.c: 241: data <<= 1;
   876  0005EE  90D8               	bcf	status,0,c
   877  0005F0  3760               	rlcf	write_radio@data& (0+255),f,b
   878  0005F2  3761               	rlcf	(write_radio@data+1)& (0+255),f,b
   879                           
   880                           ; BSR set to: 0
   881                           ;receiver.c: 242: LATCbits.LATC2 = 1;
   882  0005F4  848B               	bsf	3979,2,c	;volatile
   883                           
   884                           ; BSR set to: 0
   885                           ;receiver.c: 243: LATCbits.LATC2 = 0;
   886  0005F6  948B               	bcf	3979,2,c	;volatile
   887                           
   888                           ; BSR set to: 0
   889  0005F8  2B63               	incf	write_radio@i& (0+255),f,b
   890  0005FA  D7E8               	goto	l1118
   891  0005FC                     u570:
   892                           
   893                           ; BSR set to: 0
   894                           ;receiver.c: 244: }
   895                           ;receiver.c: 245: LATBbits.LATB4 = 1;
   896  0005FC  888A               	bsf	3978,4,c	;volatile
   897                           
   898                           ; BSR set to: 0
   899  0005FE  0012               	return		;funcret
   900  000600                     __end_of_write_radio:
   901                           	opt stack 0
   902                           tblptru	equ	0xFF8
   903                           tblptrh	equ	0xFF7
   904                           tblptrl	equ	0xFF6
   905                           tablat	equ	0xFF5
   906                           prodh	equ	0xFF4
   907                           prodl	equ	0xFF3
   908                           intcon	equ	0xFF2
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           postdec1	equ	0xFE5
   912                           fsr1l	equ	0xFE1
   913                           postinc2	equ	0xFDE
   914                           postdec2	equ	0xFDD
   915                           fsr2h	equ	0xFDA
   916                           fsr2l	equ	0xFD9
   917                           status	equ	0xFD8
   918                           
   919 ;; *************** function _isr *****************
   920 ;; Defined at:
   921 ;;		line 451 in file "receiver.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   935 ;;      Params:         0       0       0       0
   936 ;;      Locals:         0       0       0       0
   937 ;;      Temps:         18       0       0       0
   938 ;;      Totals:        18       0       0       0
   939 ;;Total ram usage:       18 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    2
   942 ;; This function calls:
   943 ;;		Absolute function
   944 ;;		_get_data
   945 ;;		_get_key
   946 ;;		_next_channel
   947 ;; This function is called by:
   948 ;;		Interrupt level 2
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           	psect	intcode
   953  000008                     __pintcode:
   954                           	opt stack 0
   955  000008                     _isr:
   956                           	opt stack 26
   957                           
   958                           ; BSR set to: 0
   959                           ;incstack = 0
   960  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   961  00000A  CFFA F00A          	movff	pclath,??_isr
   962  00000E  CFFB F00B          	movff	pclatu,??_isr+1
   963  000012  CFE9 F00C          	movff	fsr0l,??_isr+2
   964  000016  CFEA F00D          	movff	fsr0h,??_isr+3
   965  00001A  CFE1 F00E          	movff	fsr1l,??_isr+4
   966  00001E  CFE2 F00F          	movff	fsr1h,??_isr+5
   967  000022  CFD9 F010          	movff	fsr2l,??_isr+6
   968  000026  CFDA F011          	movff	fsr2h,??_isr+7
   969  00002A  CFF3 F012          	movff	prodl,??_isr+8
   970  00002E  CFF4 F013          	movff	prodh,??_isr+9
   971  000032  CFF6 F014          	movff	tblptrl,??_isr+10
   972  000036  CFF7 F015          	movff	tblptrh,??_isr+11
   973  00003A  CFF8 F016          	movff	tblptru,??_isr+12
   974  00003E  CFF5 F017          	movff	tablat,??_isr+13
   975  000042  C048  F018         	movff	btemp,??_isr+14
   976  000046  C049  F019         	movff	btemp+1,??_isr+15
   977  00004A  C04A  F01A         	movff	btemp+2,??_isr+16
   978  00004E  C04B  F01B         	movff	btemp+3,??_isr+17
   979  000052                     i2l124:
   980  000052  0004               	clrwdt		;# 
   981                           
   982                           ;receiver.c: 456: flags.interrupt_complete = 1;
   983  000054  8033               	bsf	_flags,0,c
   984                           
   985                           ;receiver.c: 459: if(INTCONbits.TMR0IF)
   986  000056  A4F2               	btfss	intcon,2,c	;volatile
   987  000058  D032               	goto	i2l129
   988                           
   989                           ;receiver.c: 460: {
   990                           ;receiver.c: 461: flags.interrupt_complete = 0;
   991  00005A  9033               	bcf	_flags,0,c
   992                           
   993                           ;receiver.c: 462: INTCONbits.TMR0IF = 0;
   994  00005C  94F2               	bcf	intcon,2,c	;volatile
   995                           
   996                           ;receiver.c: 463: TMR0 = -(32000000 / 4 / 32 / 25);
   997  00005E  0ED8               	movlw	216
   998  000060  6ED7               	movwf	4055,c	;volatile
   999  000062  0EF0               	movlw	240
  1000  000064  6ED6               	movwf	4054,c	;volatile
  1001                           
  1002                           ;receiver.c: 464: tick++;
  1003  000066  0E01               	movlw	1
  1004  000068  2628               	addwf	_tick,f,c
  1005  00006A  0E00               	movlw	0
  1006  00006C  2229               	addwfc	_tick+1,f,c
  1007  00006E  222A               	addwfc	_tick+2,f,c
  1008  000070  222B               	addwfc	_tick+3,f,c
  1009                           
  1010                           ;receiver.c: 466: if(flags.scanning && tick >= 5)
  1011  000072  A233               	btfss	_flags,1,c
  1012  000074  D013               	goto	i2l126
  1013  000076  502B               	movf	_tick+3,w,c
  1014  000078  102A               	iorwf	_tick+2,w,c
  1015  00007A  1029               	iorwf	_tick+1,w,c
  1016  00007C  E104               	bnz	i2u48_40
  1017  00007E  0E05               	movlw	5
  1018  000080  5C28               	subwf	_tick,w,c
  1019  000082  A0D8               	btfss	status,0,c
  1020  000084  D00B               	goto	i2l126
  1021  000086                     i2u48_40:
  1022                           
  1023                           ;receiver.c: 467: {
  1024                           ;receiver.c: 468: tick = 0;
  1025  000086  0E00               	movlw	0
  1026  000088  6E28               	movwf	_tick,c
  1027  00008A  0E00               	movlw	0
  1028  00008C  6E29               	movwf	_tick+1,c
  1029  00008E  0E00               	movlw	0
  1030  000090  6E2A               	movwf	_tick+2,c
  1031  000092  0E00               	movlw	0
  1032  000094  6E2B               	movwf	_tick+3,c
  1033                           
  1034                           ;receiver.c: 469: next_channel();
  1035  000096  EC3A  F003         	call	_next_channel	;wreg free
  1036                           
  1037                           ;receiver.c: 470: }
  1038  00009A  D011               	goto	i2l129
  1039  00009C                     i2l126:
  1040                           
  1041                           ;receiver.c: 471: else
  1042                           ;receiver.c: 472: if(!flags.scanning)
  1043  00009C  B233               	btfsc	_flags,1,c
  1044  00009E  D00F               	goto	i2l129
  1045                           
  1046                           ;receiver.c: 473: {
  1047                           ;receiver.c: 474: next_channel();
  1048  0000A0  EC3A  F003         	call	_next_channel	;wreg free
  1049                           
  1050                           ;receiver.c: 475: missed_packets++;
  1051  0000A4  2A31               	incf	_missed_packets,f,c
  1052                           
  1053                           ;receiver.c: 477: if(missed_packets > 25)
  1054  0000A6  0E19               	movlw	25
  1055  0000A8  6431               	cpfsgt	_missed_packets,c
  1056  0000AA  D009               	goto	i2l129
  1057                           
  1058                           ;receiver.c: 478: {
  1059                           ;receiver.c: 479: flags.scanning = 1;
  1060  0000AC  8233               	bsf	_flags,1,c
  1061                           
  1062                           ;receiver.c: 480: tick = 0;
  1063  0000AE  0E00               	movlw	0
  1064  0000B0  6E28               	movwf	_tick,c
  1065  0000B2  0E00               	movlw	0
  1066  0000B4  6E29               	movwf	_tick+1,c
  1067  0000B6  0E00               	movlw	0
  1068  0000B8  6E2A               	movwf	_tick+2,c
  1069  0000BA  0E00               	movlw	0
  1070  0000BC  6E2B               	movwf	_tick+3,c
  1071  0000BE                     i2l129:
  1072                           
  1073                           ;receiver.c: 481: }
  1074                           ;receiver.c: 482: }
  1075                           ;receiver.c: 484: }
  1076                           ;receiver.c: 487: if(PIR1bits.RCIF)
  1077  0000BE  AA9E               	btfss	3998,5,c	;volatile
  1078  0000C0  D010               	goto	i2u52_49
  1079                           
  1080                           ;receiver.c: 488: {
  1081                           ;receiver.c: 489: flags.interrupt_complete = 0;
  1082  0000C2  9033               	bcf	_flags,0,c
  1083                           
  1084                           ;receiver.c: 491: serial_in = RCREG;
  1085  0000C4  CFAE F030          	movff	4014,_serial_in	;volatile
  1086                           
  1087                           ;receiver.c: 492: PIR1bits.RCIF = 0;
  1088  0000C8  9A9E               	bcf	3998,5,c	;volatile
  1089                           
  1090                           ;receiver.c: 493: receive_state();
  1091  0000CA  D801               	call	i2u52_48
  1092  0000CC  D00A               	goto	i2u52_49
  1093  0000CE                     i2u52_48:
  1094  0000CE  0005               	push	
  1095  0000D0  6EFA               	movwf	pclath,c
  1096  0000D2  5046               	movf	_receive_state,w,c
  1097  0000D4  6EFD               	movwf	tosl,c
  1098  0000D6  5047               	movf	_receive_state+1,w,c
  1099  0000D8  6EFE               	movwf	tosh,c
  1100  0000DA  50F8               	movf	tblptru,w,c
  1101  0000DC  6EFF               	movwf	tosu,c
  1102  0000DE  50FA               	movf	pclath,w,c
  1103  0000E0  0012               	return		;indir
  1104  0000E2                     i2u52_49:
  1105                           
  1106                           ;receiver.c: 494: }
  1107                           ;receiver.c: 496: if(flags.interrupt_complete) break;
  1108  0000E2  A033               	btfss	_flags,0,c
  1109  0000E4  D7B6               	goto	i2l124
  1110  0000E6  C01B  F04B         	movff	??_isr+17,btemp+3
  1111  0000EA  C01A  F04A         	movff	??_isr+16,btemp+2
  1112  0000EE  C019  F049         	movff	??_isr+15,btemp+1
  1113  0000F2  C018  F048         	movff	??_isr+14,btemp
  1114  0000F6  C017  FFF5         	movff	??_isr+13,tablat
  1115  0000FA  C016  FFF8         	movff	??_isr+12,tblptru
  1116  0000FE  C015  FFF7         	movff	??_isr+11,tblptrh
  1117  000102  C014  FFF6         	movff	??_isr+10,tblptrl
  1118  000106  C013  FFF4         	movff	??_isr+9,prodh
  1119  00010A  C012  FFF3         	movff	??_isr+8,prodl
  1120  00010E  C011  FFDA         	movff	??_isr+7,fsr2h
  1121  000112  C010  FFD9         	movff	??_isr+6,fsr2l
  1122  000116  C00F  FFE2         	movff	??_isr+5,fsr1h
  1123  00011A  C00E  FFE1         	movff	??_isr+4,fsr1l
  1124  00011E  C00D  FFEA         	movff	??_isr+3,fsr0h
  1125  000122  C00C  FFE9         	movff	??_isr+2,fsr0l
  1126  000126  C00B  FFFB         	movff	??_isr+1,pclatu
  1127  00012A  C00A  FFFA         	movff	??_isr,pclath
  1128  00012E  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1129  000130  0011               	retfie		f
  1130  000132                     __end_of_isr:
  1131                           	opt stack 0
  1132                           tosu	equ	0xFFF
  1133                           tosh	equ	0xFFE
  1134                           tosl	equ	0xFFD
  1135                           pclatu	equ	0xFFB
  1136                           pclath	equ	0xFFA
  1137                           tblptru	equ	0xFF8
  1138                           tblptrh	equ	0xFF7
  1139                           tblptrl	equ	0xFF6
  1140                           tablat	equ	0xFF5
  1141                           prodh	equ	0xFF4
  1142                           prodl	equ	0xFF3
  1143                           intcon	equ	0xFF2
  1144                           postinc0	equ	0xFEE
  1145                           fsr0h	equ	0xFEA
  1146                           fsr0l	equ	0xFE9
  1147                           wreg	equ	0xFE8
  1148                           postdec1	equ	0xFE5
  1149                           fsr1h	equ	0xFE2
  1150                           fsr1l	equ	0xFE1
  1151                           postinc2	equ	0xFDE
  1152                           postdec2	equ	0xFDD
  1153                           fsr2h	equ	0xFDA
  1154                           fsr2l	equ	0xFD9
  1155                           status	equ	0xFD8
  1156                           
  1157 ;; *************** function _next_channel *****************
  1158 ;; Defined at:
  1159 ;;		line 302 in file "receiver.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;		None
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1173 ;;      Params:         0       0       0       0
  1174 ;;      Locals:         0       0       0       0
  1175 ;;      Temps:          2       0       0       0
  1176 ;;      Totals:         2       0       0       0
  1177 ;;Total ram usage:        2 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    1
  1180 ;; This function calls:
  1181 ;;		i2_write_radio
  1182 ;; This function is called by:
  1183 ;;		_isr
  1184 ;; This function uses a non-reentrant model
  1185 ;;
  1186                           
  1187                           	psect	text6
  1188  000674                     __ptext6:
  1189                           	opt stack 0
  1190  000674                     _next_channel:
  1191                           	opt stack 26
  1192                           
  1193                           ;receiver.c: 304: current_channel++;
  1194                           
  1195                           ;incstack = 0
  1196  000674  2A32               	incf	_current_channel,f,c
  1197                           
  1198                           ;receiver.c: 305: if(current_channel >= (sizeof(channels) / sizeof(uint16_t)))
  1199  000676  0E08               	movlw	8
  1200  000678  6432               	cpfsgt	_current_channel,c
  1201  00067A  D002               	goto	i2l82
  1202                           
  1203                           ;receiver.c: 306: {
  1204                           ;receiver.c: 307: current_channel = 0;
  1205  00067C  0E00               	movlw	0
  1206  00067E  6E32               	movwf	_current_channel,c
  1207  000680                     i2l82:
  1208                           
  1209                           ;receiver.c: 308: }
  1210                           ;receiver.c: 309: write_radio((0xA000 | (channels[current_channel])));
  1211  000680  5032               	movf	_current_channel,w,c
  1212  000682  0D02               	mullw	2
  1213  000684  0E34               	movlw	low _channels
  1214  000686  24F3               	addwf	prodl,w,c
  1215  000688  6ED9               	movwf	fsr2l,c
  1216  00068A  0E00               	movlw	high _channels
  1217  00068C  20F4               	addwfc	prodh,w,c
  1218  00068E  6EDA               	movwf	fsr2h,c
  1219  000690  CFDE F005          	movff	postinc2,??_next_channel
  1220  000694  CFDD F006          	movff	postdec2,??_next_channel+1
  1221  000698  0E00               	movlw	0
  1222  00069A  1005               	iorwf	??_next_channel,w,c
  1223  00069C  6E01               	movwf	i2write_radio@data,c
  1224  00069E  0EA0               	movlw	160
  1225  0006A0  1006               	iorwf	??_next_channel+1,w,c
  1226  0006A2  6E02               	movwf	i2write_radio@data+1,c
  1227  0006A4  EC1D  F003         	call	i2_write_radio	;wreg free
  1228  0006A8  0012               	return		;funcret
  1229  0006AA                     __end_of_next_channel:
  1230                           	opt stack 0
  1231                           tosu	equ	0xFFF
  1232                           tosh	equ	0xFFE
  1233                           tosl	equ	0xFFD
  1234                           pclatu	equ	0xFFB
  1235                           pclath	equ	0xFFA
  1236                           tblptru	equ	0xFF8
  1237                           tblptrh	equ	0xFF7
  1238                           tblptrl	equ	0xFF6
  1239                           tablat	equ	0xFF5
  1240                           prodh	equ	0xFF4
  1241                           prodl	equ	0xFF3
  1242                           intcon	equ	0xFF2
  1243                           postinc0	equ	0xFEE
  1244                           fsr0h	equ	0xFEA
  1245                           fsr0l	equ	0xFE9
  1246                           wreg	equ	0xFE8
  1247                           postdec1	equ	0xFE5
  1248                           fsr1h	equ	0xFE2
  1249                           fsr1l	equ	0xFE1
  1250                           postinc2	equ	0xFDE
  1251                           postdec2	equ	0xFDD
  1252                           fsr2h	equ	0xFDA
  1253                           fsr2l	equ	0xFD9
  1254                           status	equ	0xFD8
  1255                           
  1256 ;; *************** function i2_write_radio *****************
  1257 ;; Defined at:
  1258 ;;		line 232 in file "receiver.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;  data            2    0[COMRAM] unsigned int 
  1261 ;; Auto vars:     Size  Location     Type
  1262 ;;  write_radio     1    3[COMRAM] unsigned char 
  1263 ;; Return value:  Size  Location     Type
  1264 ;;                  1    wreg      void 
  1265 ;; Registers used:
  1266 ;;		wreg, status,2, status,0
  1267 ;; Tracked objects:
  1268 ;;		On entry : 0/0
  1269 ;;		On exit  : 0/0
  1270 ;;		Unchanged: 0/0
  1271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1272 ;;      Params:         2       0       0       0
  1273 ;;      Locals:         1       0       0       0
  1274 ;;      Temps:          1       0       0       0
  1275 ;;      Totals:         4       0       0       0
  1276 ;;Total ram usage:        4 bytes
  1277 ;; Hardware stack levels used:    1
  1278 ;; This function calls:
  1279 ;;		Nothing
  1280 ;; This function is called by:
  1281 ;;		_next_channel
  1282 ;; This function uses a non-reentrant model
  1283 ;;
  1284                           
  1285                           	psect	text7
  1286  00063A                     __ptext7:
  1287                           	opt stack 0
  1288  00063A                     i2_write_radio:
  1289                           	opt stack 26
  1290                           
  1291                           ;incstack = 0
  1292  00063A  0004               	clrwdt		;# 
  1293                           
  1294                           ;receiver.c: 236: LATBbits.LATB4 = 0;
  1295  00063C  988A               	bcf	3978,4,c	;volatile
  1296                           
  1297                           ;receiver.c: 237: uint8_t i;
  1298                           ;receiver.c: 238: for(i = 0; i < 16; i++)
  1299  00063E  0E00               	movlw	0
  1300  000640  6E04               	movwf	i2write_radio@i,c
  1301  000642                     i2l998:
  1302  000642  0E0F               	movlw	15
  1303  000644  6404               	cpfsgt	i2write_radio@i,c
  1304  000646  D001               	goto	i2l71
  1305  000648  D013               	goto	i2u42_40
  1306  00064A                     i2l71:
  1307                           
  1308                           ;receiver.c: 239: {
  1309                           ;receiver.c: 240: LATCbits.LATC1 = (uint8_t)((data & 0x8000) ? 1 : 0);
  1310  00064A  AE02               	btfss	i2write_radio@data+1,7,c
  1311  00064C  D003               	goto	i2u40_40
  1312  00064E  6A03               	clrf	??i2_write_radio& (0+255),c
  1313  000650  2A03               	incf	??i2_write_radio& (0+255),f,c
  1314  000652  D001               	goto	i2u41_48
  1315  000654                     i2u40_40:
  1316  000654  6A03               	clrf	??i2_write_radio& (0+255),c
  1317  000656                     i2u41_48:
  1318  000656  4603               	rlncf	??i2_write_radio,f,c
  1319  000658  508B               	movf	3979,w,c	;volatile
  1320  00065A  1803               	xorwf	??i2_write_radio,w,c
  1321  00065C  0BFD               	andlw	-3
  1322  00065E  1803               	xorwf	??i2_write_radio,w,c
  1323  000660  6E8B               	movwf	3979,c	;volatile
  1324                           
  1325                           ;receiver.c: 241: data <<= 1;
  1326  000662  90D8               	bcf	status,0,c
  1327  000664  3601               	rlcf	i2write_radio@data,f,c
  1328  000666  3602               	rlcf	i2write_radio@data+1,f,c
  1329                           
  1330                           ;receiver.c: 242: LATCbits.LATC2 = 1;
  1331  000668  848B               	bsf	3979,2,c	;volatile
  1332                           
  1333                           ;receiver.c: 243: LATCbits.LATC2 = 0;
  1334  00066A  948B               	bcf	3979,2,c	;volatile
  1335  00066C  2A04               	incf	i2write_radio@i,f,c
  1336  00066E  D7E9               	goto	i2l998
  1337  000670                     i2u42_40:
  1338                           
  1339                           ;receiver.c: 244: }
  1340                           ;receiver.c: 245: LATBbits.LATB4 = 1;
  1341  000670  888A               	bsf	3978,4,c	;volatile
  1342  000672  0012               	return		;funcret
  1343  000674                     __end_ofi2_write_radio:
  1344                           	opt stack 0
  1345                           tosu	equ	0xFFF
  1346                           tosh	equ	0xFFE
  1347                           tosl	equ	0xFFD
  1348                           pclatu	equ	0xFFB
  1349                           pclath	equ	0xFFA
  1350                           tblptru	equ	0xFF8
  1351                           tblptrh	equ	0xFF7
  1352                           tblptrl	equ	0xFF6
  1353                           tablat	equ	0xFF5
  1354                           prodh	equ	0xFF4
  1355                           prodl	equ	0xFF3
  1356                           intcon	equ	0xFF2
  1357                           postinc0	equ	0xFEE
  1358                           fsr0h	equ	0xFEA
  1359                           fsr0l	equ	0xFE9
  1360                           wreg	equ	0xFE8
  1361                           postdec1	equ	0xFE5
  1362                           fsr1h	equ	0xFE2
  1363                           fsr1l	equ	0xFE1
  1364                           postinc2	equ	0xFDE
  1365                           postdec2	equ	0xFDD
  1366                           fsr2h	equ	0xFDA
  1367                           fsr2l	equ	0xFD9
  1368                           status	equ	0xFD8
  1369                           
  1370 ;; *************** function _get_data *****************
  1371 ;; Defined at:
  1372 ;;		line 336 in file "receiver.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;  current_time    2    5[COMRAM] unsigned int 
  1377 ;;  next_hop        2    3[COMRAM] unsigned int 
  1378 ;;  i               1    8[COMRAM] unsigned char 
  1379 ;;  failed          1    7[COMRAM] unsigned char 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1389 ;;      Params:         0       0       0       0
  1390 ;;      Locals:         6       0       0       0
  1391 ;;      Temps:          3       0       0       0
  1392 ;;      Totals:         9       0       0       0
  1393 ;;Total ram usage:        9 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; This function calls:
  1396 ;;		Nothing
  1397 ;; This function is called by:
  1398 ;;		_get_key
  1399 ;;		_isr
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403                           	psect	text8
  1404  00030A                     __ptext8:
  1405                           	opt stack 0
  1406  00030A                     _get_data:
  1407                           	opt stack 27
  1408                           
  1409                           ;receiver.c: 339: serial_data[data_offset++] = serial_in;
  1410                           
  1411                           ;incstack = 0
  1412  00030A  502E               	movf	_data_offset,w,c
  1413  00030C  0D01               	mullw	1
  1414  00030E  0E1C               	movlw	low _serial_data
  1415  000310  24F3               	addwf	prodl,w,c
  1416  000312  6ED9               	movwf	fsr2l,c
  1417  000314  0E00               	movlw	high _serial_data
  1418  000316  20F4               	addwfc	prodh,w,c
  1419  000318  6EDA               	movwf	fsr2h,c
  1420  00031A  C030  FFDF         	movff	_serial_in,indf2
  1421  00031E  2A2E               	incf	_data_offset,f,c
  1422                           
  1423                           ;receiver.c: 340: if(data_offset >= 12)
  1424  000320  0E0B               	movlw	11
  1425  000322  642E               	cpfsgt	_data_offset,c
  1426  000324  0012               	return	
  1427                           
  1428                           ;receiver.c: 341: {
  1429                           ;receiver.c: 342: key_offset = 0;
  1430  000326  0E00               	movlw	0
  1431  000328  6E2F               	movwf	_key_offset,c
  1432                           
  1433                           ;receiver.c: 343: receive_state = get_key;
  1434  00032A  0E54               	movlw	low _get_key
  1435  00032C  6E46               	movwf	_receive_state,c
  1436  00032E  0E05               	movlw	high _get_key
  1437  000330  6E47               	movwf	_receive_state+1,c
  1438                           
  1439                           ;receiver.c: 345: uint8_t i;
  1440                           ;receiver.c: 346: uint8_t failed = 0;
  1441  000332  0E00               	movlw	0
  1442  000334  6E08               	movwf	get_data@failed,c
  1443                           
  1444                           ;receiver.c: 347: for(i = 0; i < 12; i += 3)
  1445  000336  0E00               	movlw	0
  1446  000338  6E09               	movwf	get_data@i,c
  1447  00033A                     i2l854:
  1448  00033A  0E0B               	movlw	11
  1449  00033C  6409               	cpfsgt	get_data@i,c
  1450  00033E  D001               	goto	i2l96
  1451  000340  D034               	goto	i2u17_40
  1452  000342                     i2l96:
  1453                           
  1454                           ;receiver.c: 348: {
  1455                           ;receiver.c: 349: if(serial_data[0] != serial_data[i] &&
  1456                           ;receiver.c: 350: serial_data[1] != serial_data[i + 1] &&
  1457                           ;receiver.c: 351: serial_data[2] != serial_data[i + 2])
  1458  000342  5009               	movf	get_data@i,w,c
  1459  000344  0D01               	mullw	1
  1460  000346  0E1C               	movlw	low _serial_data
  1461  000348  24F3               	addwf	prodl,w,c
  1462  00034A  6ED9               	movwf	fsr2l,c
  1463  00034C  0E00               	movlw	high _serial_data
  1464  00034E  20F4               	addwfc	prodh,w,c
  1465  000350  6EDA               	movwf	fsr2h,c
  1466  000352  501C               	movf	_serial_data,w,c
  1467  000354  18DE               	xorwf	postinc2,w,c
  1468  000356  B4D8               	btfsc	status,2,c
  1469  000358  D025               	goto	i2l98
  1470  00035A  5009               	movf	get_data@i,w,c
  1471  00035C  6E01               	movwf	??_get_data& (0+255),c
  1472  00035E  6A02               	clrf	(??_get_data+1)& (0+255),c
  1473  000360  0E01               	movlw	1
  1474  000362  2601               	addwf	??_get_data,f,c
  1475  000364  0E00               	movlw	0
  1476  000366  2202               	addwfc	??_get_data+1,f,c
  1477  000368  0E1C               	movlw	low _serial_data
  1478  00036A  2401               	addwf	??_get_data,w,c
  1479  00036C  6ED9               	movwf	fsr2l,c
  1480  00036E  0E00               	movlw	high _serial_data
  1481  000370  2002               	addwfc	??_get_data+1,w,c
  1482  000372  6EDA               	movwf	fsr2h,c
  1483  000374  50DE               	movf	postinc2,w,c
  1484  000376  181D               	xorwf	_serial_data+1,w,c
  1485  000378  B4D8               	btfsc	status,2,c
  1486  00037A  D014               	goto	i2l98
  1487  00037C  5009               	movf	get_data@i,w,c
  1488  00037E  6E01               	movwf	??_get_data& (0+255),c
  1489  000380  6A02               	clrf	(??_get_data+1)& (0+255),c
  1490  000382  0E02               	movlw	2
  1491  000384  2601               	addwf	??_get_data,f,c
  1492  000386  0E00               	movlw	0
  1493  000388  2202               	addwfc	??_get_data+1,f,c
  1494  00038A  0E1C               	movlw	low _serial_data
  1495  00038C  2401               	addwf	??_get_data,w,c
  1496  00038E  6ED9               	movwf	fsr2l,c
  1497  000390  0E00               	movlw	high _serial_data
  1498  000392  2002               	addwfc	??_get_data+1,w,c
  1499  000394  6EDA               	movwf	fsr2h,c
  1500  000396  50DE               	movf	postinc2,w,c
  1501  000398  181E               	xorwf	_serial_data+2,w,c
  1502  00039A  B4D8               	btfsc	status,2,c
  1503  00039C  D003               	goto	i2l98
  1504                           
  1505                           ;receiver.c: 352: {
  1506                           ;receiver.c: 354: failed = 1;
  1507  00039E  0E01               	movlw	1
  1508  0003A0  6E08               	movwf	get_data@failed,c
  1509                           
  1510                           ;receiver.c: 355: break;
  1511  0003A2  D003               	goto	i2u17_40
  1512  0003A4                     i2l98:
  1513  0003A4  0E03               	movlw	3
  1514  0003A6  2609               	addwf	get_data@i,f,c
  1515  0003A8  D7C8               	goto	i2l854
  1516  0003AA                     i2u17_40:
  1517                           
  1518                           ;receiver.c: 356: }
  1519                           ;receiver.c: 357: }
  1520                           ;receiver.c: 360: if(!failed)
  1521  0003AA  5008               	movf	get_data@failed,w,c
  1522  0003AC  A4D8               	btfss	status,2,c
  1523  0003AE  0012               	return	
  1524                           
  1525                           ;receiver.c: 361: {
  1526                           ;receiver.c: 362: LATCbits.LATC5 = !LATCbits.LATC5;
  1527  0003B0  BA8B               	btfsc	3979,5,c	;volatile
  1528  0003B2  D003               	goto	i2u19_40
  1529  0003B4  6A01               	clrf	??_get_data& (0+255),c
  1530  0003B6  2A01               	incf	??_get_data& (0+255),f,c
  1531  0003B8  D001               	goto	i2u20_48
  1532  0003BA                     i2u19_40:
  1533  0003BA  6A01               	clrf	??_get_data& (0+255),c
  1534  0003BC                     i2u20_48:
  1535  0003BC  3A01               	swapf	??_get_data,f,c
  1536  0003BE  4601               	rlncf	??_get_data,f,c
  1537  0003C0  508B               	movf	3979,w,c	;volatile
  1538  0003C2  1801               	xorwf	??_get_data,w,c
  1539  0003C4  0BDF               	andlw	-33
  1540  0003C6  1801               	xorwf	??_get_data,w,c
  1541  0003C8  6E8B               	movwf	3979,c	;volatile
  1542                           
  1543                           ;receiver.c: 364: flags.got_packet = 1;
  1544  0003CA  8433               	bsf	_flags,2,c
  1545                           
  1546                           ;receiver.c: 365: flags.scanning = 0;
  1547  0003CC  9233               	bcf	_flags,1,c
  1548                           
  1549                           ;receiver.c: 366: missed_packets = 0;
  1550  0003CE  0E00               	movlw	0
  1551  0003D0  6E31               	movwf	_missed_packets,c
  1552                           
  1553                           ;receiver.c: 368: uint16_t next_hop = start_time + (32000000 / 4 / 32 / 25) - (32000000 
      +                          / 4 / 32 / 100);
  1554  0003D2  0E4C               	movlw	76
  1555  0003D4  242C               	addwf	_start_time,w,c
  1556  0003D6  6E04               	movwf	get_data@next_hop,c
  1557  0003D8  0E1D               	movlw	29
  1558  0003DA  202D               	addwfc	_start_time+1,w,c
  1559  0003DC  6E05               	movwf	get_data@next_hop+1,c
  1560                           
  1561                           ;receiver.c: 369: uint16_t current_time = TMR0;
  1562  0003DE  CFD6 F006          	movff	4054,get_data@current_time	;volatile
  1563  0003E2  CFD7 F007          	movff	4055,get_data@current_time+1	;volatile
  1564                           
  1565                           ;receiver.c: 370: TMR0 = current_time - next_hop;
  1566  0003E6  C004  F001         	movff	get_data@next_hop,??_get_data
  1567  0003EA  C005  F002         	movff	get_data@next_hop+1,??_get_data+1
  1568  0003EE  1E01               	comf	??_get_data,f,c
  1569  0003F0  1E02               	comf	??_get_data+1,f,c
  1570  0003F2  4A01               	infsnz	??_get_data,f,c
  1571  0003F4  2A02               	incf	??_get_data+1,f,c
  1572  0003F6  5006               	movf	get_data@current_time,w,c
  1573  0003F8  2401               	addwf	??_get_data,w,c
  1574  0003FA  6ED6               	movwf	4054,c	;volatile
  1575  0003FC  5007               	movf	get_data@current_time+1,w,c
  1576  0003FE  2002               	addwfc	??_get_data+1,w,c
  1577  000400  6ED7               	movwf	4055,c	;volatile
  1578                           
  1579                           ;receiver.c: 371: INTCONbits.TMR0IF = 0;
  1580  000402  94F2               	bcf	intcon,2,c	;volatile
  1581  000404  0012               	return	
  1582  000406                     __end_of_get_data:
  1583                           	opt stack 0
  1584                           tosu	equ	0xFFF
  1585                           tosh	equ	0xFFE
  1586                           tosl	equ	0xFFD
  1587                           pclatu	equ	0xFFB
  1588                           pclath	equ	0xFFA
  1589                           tblptru	equ	0xFF8
  1590                           tblptrh	equ	0xFF7
  1591                           tblptrl	equ	0xFF6
  1592                           tablat	equ	0xFF5
  1593                           prodh	equ	0xFF4
  1594                           prodl	equ	0xFF3
  1595                           intcon	equ	0xFF2
  1596                           postinc0	equ	0xFEE
  1597                           fsr0h	equ	0xFEA
  1598                           fsr0l	equ	0xFE9
  1599                           wreg	equ	0xFE8
  1600                           postdec1	equ	0xFE5
  1601                           fsr1h	equ	0xFE2
  1602                           fsr1l	equ	0xFE1
  1603                           indf2	equ	0xFDF
  1604                           postinc2	equ	0xFDE
  1605                           postdec2	equ	0xFDD
  1606                           fsr2h	equ	0xFDA
  1607                           fsr2l	equ	0xFD9
  1608                           status	equ	0xFD8
  1609                           
  1610 ;; *************** function _get_key *****************
  1611 ;; Defined at:
  1612 ;;		line 376 in file "receiver.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;		None
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;		None
  1617 ;; Return value:  Size  Location     Type
  1618 ;;                  1    wreg      void 
  1619 ;; Registers used:
  1620 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  1621 ;; Tracked objects:
  1622 ;;		On entry : 0/0
  1623 ;;		On exit  : 0/0
  1624 ;;		Unchanged: 0/0
  1625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1626 ;;      Params:         0       0       0       0
  1627 ;;      Locals:         0       0       0       0
  1628 ;;      Temps:          0       0       0       0
  1629 ;;      Totals:         0       0       0       0
  1630 ;;Total ram usage:        0 bytes
  1631 ;; Hardware stack levels used:    1
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_get_data
  1636 ;;		_main
  1637 ;;		_isr
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           	psect	text9
  1642  000554                     __ptext9:
  1643                           	opt stack 0
  1644  000554                     _get_key:
  1645                           	opt stack 27
  1646                           
  1647                           ;receiver.c: 379: if(serial_in == PACKET_KEY[key_offset])
  1648                           
  1649                           ;incstack = 0
  1650  000554  502F               	movf	_key_offset,w,c
  1651  000556  0D01               	mullw	1
  1652  000558  0E01               	movlw	low _PACKET_KEY
  1653  00055A  24F3               	addwf	prodl,w,c
  1654  00055C  6EF6               	movwf	tblptrl,c
  1655  00055E  0E03               	movlw	high _PACKET_KEY
  1656  000560  20F4               	addwfc	prodh,w,c
  1657  000562  6EF7               	movwf	tblptrh,c
  1658  000564                     	if	0	;There are less than 3 active tblptr bytes
  1659  000564                     	endif
  1660  000564  0008               	tblrd		*
  1661  000566  50F5               	movf	tablat,w,c
  1662  000568  1830               	xorwf	_serial_in,w,c
  1663  00056A  A4D8               	btfss	status,2,c
  1664  00056C  D014               	goto	i2l103
  1665                           
  1666                           ;receiver.c: 380: {
  1667                           ;receiver.c: 381: if(key_offset == 0)
  1668  00056E  502F               	movf	_key_offset,w,c
  1669  000570  A4D8               	btfss	status,2,c
  1670  000572  D004               	goto	i2l104
  1671                           
  1672                           ;receiver.c: 382: {
  1673                           ;receiver.c: 383: start_time = TMR0;
  1674  000574  CFD6 F02C          	movff	4054,_start_time	;volatile
  1675  000578  CFD7 F02D          	movff	4055,_start_time+1	;volatile
  1676  00057C                     i2l104:
  1677                           
  1678                           ;receiver.c: 384: }
  1679                           ;receiver.c: 386: key_offset++;
  1680  00057C  2A2F               	incf	_key_offset,f,c
  1681                           
  1682                           ;receiver.c: 387: if(key_offset >= sizeof(PACKET_KEY))
  1683  00057E  0E07               	movlw	7
  1684  000580  642F               	cpfsgt	_key_offset,c
  1685  000582  0012               	return	
  1686                           
  1687                           ;receiver.c: 388: {
  1688                           ;receiver.c: 389: receive_state = get_data;
  1689  000584  0E0A               	movlw	low _get_data
  1690  000586  6E46               	movwf	_receive_state,c
  1691  000588  0E03               	movlw	high _get_data
  1692  00058A  6E47               	movwf	_receive_state+1,c
  1693                           
  1694                           ;receiver.c: 390: data_offset = 0;
  1695  00058C  0E00               	movlw	0
  1696  00058E  6E2E               	movwf	_data_offset,c
  1697                           
  1698                           ;receiver.c: 391: key_offset = 0;
  1699  000590  0E00               	movlw	0
  1700  000592  6E2F               	movwf	_key_offset,c
  1701                           
  1702                           ;receiver.c: 392: }
  1703                           ;receiver.c: 393: }
  1704  000594  0012               	return	
  1705  000596                     i2l103:
  1706                           
  1707                           ;receiver.c: 394: else
  1708                           ;receiver.c: 395: if(serial_in == PACKET_KEY[0])
  1709  000596  0E01               	movlw	low _PACKET_KEY
  1710  000598  6EF6               	movwf	tblptrl,c
  1711  00059A                     	if	1	;There is more than 1 active tblptr byte
  1712  00059A  0E03               	movlw	high _PACKET_KEY
  1713  00059C  6EF7               	movwf	tblptrh,c
  1714  00059E                     	endif
  1715  00059E                     	if	0	;There are less than 3 active tblptr bytes
  1716  00059E                     	endif
  1717  00059E  0008               	tblrd		*
  1718  0005A0  50F5               	movf	tablat,w,c
  1719  0005A2  1830               	xorwf	_serial_in,w,c
  1720  0005A4  A4D8               	btfss	status,2,c
  1721  0005A6  D007               	goto	i2l107
  1722                           
  1723                           ;receiver.c: 396: {
  1724                           ;receiver.c: 397: key_offset = 1;
  1725  0005A8  0E01               	movlw	1
  1726  0005AA  6E2F               	movwf	_key_offset,c
  1727                           
  1728                           ;receiver.c: 398: start_time = TMR0;
  1729  0005AC  CFD6 F02C          	movff	4054,_start_time	;volatile
  1730  0005B0  CFD7 F02D          	movff	4055,_start_time+1	;volatile
  1731                           
  1732                           ;receiver.c: 399: }
  1733  0005B4  0012               	return	
  1734  0005B6                     i2l107:
  1735                           
  1736                           ;receiver.c: 400: else
  1737                           ;receiver.c: 401: if(key_offset > 0)
  1738  0005B6  502F               	movf	_key_offset,w,c
  1739  0005B8  B4D8               	btfsc	status,2,c
  1740  0005BA  0012               	return	
  1741                           
  1742                           ;receiver.c: 402: {
  1743                           ;receiver.c: 403: key_offset = 0;
  1744  0005BC  0E00               	movlw	0
  1745  0005BE  6E2F               	movwf	_key_offset,c
  1746  0005C0  0012               	return	
  1747  0005C2                     __end_of_get_key:
  1748                           	opt stack 0
  1749                           tosu	equ	0xFFF
  1750                           tosh	equ	0xFFE
  1751                           tosl	equ	0xFFD
  1752                           pclatu	equ	0xFFB
  1753                           pclath	equ	0xFFA
  1754                           tblptru	equ	0xFF8
  1755                           tblptrh	equ	0xFF7
  1756                           tblptrl	equ	0xFF6
  1757                           tablat	equ	0xFF5
  1758                           prodh	equ	0xFF4
  1759                           prodl	equ	0xFF3
  1760                           intcon	equ	0xFF2
  1761                           postinc0	equ	0xFEE
  1762                           fsr0h	equ	0xFEA
  1763                           fsr0l	equ	0xFE9
  1764                           wreg	equ	0xFE8
  1765                           postdec1	equ	0xFE5
  1766                           fsr1h	equ	0xFE2
  1767                           fsr1l	equ	0xFE1
  1768                           indf2	equ	0xFDF
  1769                           postinc2	equ	0xFDE
  1770                           postdec2	equ	0xFDD
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           tosu	equ	0xFFF
  1775                           tosh	equ	0xFFE
  1776                           tosl	equ	0xFFD
  1777                           pclatu	equ	0xFFB
  1778                           pclath	equ	0xFFA
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           prodh	equ	0xFF4
  1784                           prodl	equ	0xFF3
  1785                           intcon	equ	0xFF2
  1786                           postinc0	equ	0xFEE
  1787                           fsr0h	equ	0xFEA
  1788                           fsr0l	equ	0xFE9
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1h	equ	0xFE2
  1792                           fsr1l	equ	0xFE1
  1793                           indf2	equ	0xFDF
  1794                           postinc2	equ	0xFDE
  1795                           postdec2	equ	0xFDD
  1796                           fsr2h	equ	0xFDA
  1797                           fsr2l	equ	0xFD9
  1798                           status	equ	0xFD8
  1799                           
  1800                           	psect	text10
  1801  000000                     __ptext10:
  1802                           	opt stack 0
  1803                           tosu	equ	0xFFF
  1804                           tosh	equ	0xFFE
  1805                           tosl	equ	0xFFD
  1806                           pclatu	equ	0xFFB
  1807                           pclath	equ	0xFFA
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           prodh	equ	0xFF4
  1813                           prodl	equ	0xFF3
  1814                           intcon	equ	0xFF2
  1815                           postinc0	equ	0xFEE
  1816                           fsr0h	equ	0xFEA
  1817                           fsr0l	equ	0xFE9
  1818                           wreg	equ	0xFE8
  1819                           postdec1	equ	0xFE5
  1820                           fsr1h	equ	0xFE2
  1821                           fsr1l	equ	0xFE1
  1822                           indf2	equ	0xFDF
  1823                           postinc2	equ	0xFDE
  1824                           postdec2	equ	0xFDD
  1825                           fsr2h	equ	0xFDA
  1826                           fsr2l	equ	0xFD9
  1827                           status	equ	0xFD8
  1828                           
  1829                           	psect	rparam
  1830  0000                     tosu	equ	0xFFF
  1831                           tosh	equ	0xFFE
  1832                           tosl	equ	0xFFD
  1833                           pclatu	equ	0xFFB
  1834                           pclath	equ	0xFFA
  1835                           tblptru	equ	0xFF8
  1836                           tblptrh	equ	0xFF7
  1837                           tblptrl	equ	0xFF6
  1838                           tablat	equ	0xFF5
  1839                           prodh	equ	0xFF4
  1840                           prodl	equ	0xFF3
  1841                           intcon	equ	0xFF2
  1842                           postinc0	equ	0xFEE
  1843                           fsr0h	equ	0xFEA
  1844                           fsr0l	equ	0xFE9
  1845                           wreg	equ	0xFE8
  1846                           postdec1	equ	0xFE5
  1847                           fsr1h	equ	0xFE2
  1848                           fsr1l	equ	0xFE1
  1849                           indf2	equ	0xFDF
  1850                           postinc2	equ	0xFDE
  1851                           postdec2	equ	0xFDD
  1852                           fsr2h	equ	0xFDA
  1853                           fsr2l	equ	0xFD9
  1854                           status	equ	0xFD8
  1855                           
  1856                           	psect	temp
  1857  000048                     btemp:
  1858                           	opt stack 0
  1859  000048                     	ds	1
  1860  0000                     int$flags	set	btemp
  1861  0000                     wtemp6	set	btemp+1
  1862                           tosu	equ	0xFFF
  1863                           tosh	equ	0xFFE
  1864                           tosl	equ	0xFFD
  1865                           pclatu	equ	0xFFB
  1866                           pclath	equ	0xFFA
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           prodh	equ	0xFF4
  1872                           prodl	equ	0xFF3
  1873                           intcon	equ	0xFF2
  1874                           postinc0	equ	0xFEE
  1875                           fsr0h	equ	0xFEA
  1876                           fsr0l	equ	0xFE9
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1h	equ	0xFE2
  1880                           fsr1l	equ	0xFE1
  1881                           indf2	equ	0xFDF
  1882                           postinc2	equ	0xFDE
  1883                           postdec2	equ	0xFDD
  1884                           fsr2h	equ	0xFDA
  1885                           fsr2l	equ	0xFD9
  1886                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        18
    BSS         24
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     27      71
    BANK0           160      6       6
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    receive_state	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), get_key(), get_data(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_get_data
    _next_channel->i2_write_radio

Critical Paths under _main in BANK0

    _main->_radio_on
    _radio_on->_write_radio

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1169
                           _radio_on
                          _serial_on
                       _write_serial
 ---------------------------------------------------------------------------------
 (1) _write_serial                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _serial_on                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _radio_on                                             2     2      0    1147
                                              4 BANK0      2     2      0
                        _write_radio
 ---------------------------------------------------------------------------------
 (2) _write_radio                                          4     2      2    1147
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 18    18      0     215
                                              9 COMRAM    18    18      0
                   Absolute function *
                           _get_data *
                            _get_key *
                       _next_channel
 ---------------------------------------------------------------------------------
 (4) _next_channel                                         2     2      0      95
                                              4 COMRAM     2     2      0
                      i2_write_radio
 ---------------------------------------------------------------------------------
 (5) i2_write_radio                                        4     2      2      95
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _get_key                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _get_data                                             9     9      0     120
                                              0 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _radio_on
     _write_radio
   _serial_on
   _write_serial

 _isr (ROOT)
   Absolute function(Fake) *
   _get_data *
   _get_key *
   _next_channel *
     i2_write_radio

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      6       6       4        3.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1B      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4D       8        0.0%
DATA                 0      0      4D      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Oct 30 02:58:01 2020

                     l71 05D4                       l90 06D8                       l76 0424  
                     l77 0422                      l115 052C                      u550 05DE  
                    u570 05FC                      u568 05E2                      _isr 0008  
           __CFG_BORV$22 000000                      prod 000FF3           get_data@failed 0008  
                    tosl 000FFD                      wreg 000FE8             __CFG_LVP$OFF 000000  
                   l1118 05CC                     ?_isr 0001                     i2l71 064A  
                   i2l82 0680                     i2l96 0342                     i2l98 03A4  
                   _TMR0 000FD6                     _TMR1 000FCE                     _main 04E4  
                   _tick 0028                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0048  
                   prodh 000FF4                     prodl 000FF3                     start 0132  
          __CFG_FOSC$IRC 000000             ___param_bank 000000                    ??_isr 000A  
          __CFG_PLLEN$ON 000000                    ?_main 0001                    _ANSEL 000F7E  
                  _T0CON 000FD5                    _T1CON 000FCD                    i2l103 0596  
                  i2l104 057C                    i2l107 05B6                    i2l124 0052  
                  i2l126 009C                    i2l129 00BE            __CFG_WDTEN$ON 000000  
                  i2l854 033A                    i2l998 0642                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _TXREG 000FAD  
                  _TXSTA 000FAC              _write_radio 05C2          __end_of_get_key 05C2  
                  _flags 0033                    pclath 000FFA                    tablat 000FF5  
                  status 000FD8                    wtemp6 0049          __initialization 0600  
           __end_of_main 0554           _missed_packets 0031         get_data@next_hop 0004  
  __size_of_write_serial 0010                   ??_main 0066            __activetblptr 000002  
      write_serial@value 0060                   _ANSELH 000F7F                   _INTCON 000FF2  
                 _OSCCON 000FD3         __end_of_get_data 0406             _write_serial 06D2  
                 clear_0 0626         __end_of_radio_on 04E4                ??_get_key 0001  
           __pdataCOMRAM 0034             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6    __end_ofi2_write_radio 0674                   tblptru 000FF8  
        write_radio@data 0060          _current_channel 0032          __CFG_HFOFST$OFF 000000  
             __accesstop 0060  __end_of__initialization 062C     get_data@current_time 0006  
          ___rparam_used 000001           __pcstackCOMRAM 0001       __end_of_PACKET_KEY 0309  
          ?_next_channel 0001               __pnvCOMRAM 0046                  _BAUDCON 000FB8  
     __size_of_serial_on 0016             ?_write_radio 0060                  i2u20_48 03BC  
                i2u40_40 0654                  i2u17_40 03AA                  i2u42_40 0670  
                i2u41_48 0656                  i2u19_40 03BA                  i2u52_48 00CE  
                i2u52_49 00E2                  i2u48_40 0086                ?_get_data 0001  
         ??_next_channel 0005                ?_radio_on 0001          __CFG_PWRTEN$OFF 000000  
                __Hparam 0000                  __Lparam 0000             __psmallconst 0300  
             _key_offset 002F                  __pcinit 0600                  __ramtop 0300  
                __ptext0 04E4                  __ptext1 06D2                  __ptext2 06AA  
                __ptext3 0406                  __ptext4 05C2                  __ptext6 0674  
                __ptext7 063A                  __ptext8 030A                  __ptext9 0554  
                _get_key 0554             __size_of_isr 012A               ??_get_data 0001  
   end_of_initialization 062C            _receive_state 0046            __Lmediumconst 0000  
             ??_radio_on 0064        __end_of_serial_on 06C0                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
              _TRISBbits 000F93                _TRISCbits 000F94               _start_time 002C  
           write_radio@i 0063            __pidataCOMRAM 06C0     __end_of_next_channel 06AA  
    start_initialization 0600              __end_of_isr 0132     __size_of_write_radio 003E  
 __size_ofi2_write_radio 003A              __pbssCOMRAM 001C            __pcstackBANK0 0060  
            _data_offset 002E        __size_of_get_data 00FC        __size_of_radio_on 00DE  
              __pintcode 0008                 ?_get_key 0001              __smallconst 0300  
          i2_write_radio 063A                 _LATBbits 000F8A                 _LATCbits 000F8B  
               _PIE1bits 000F9D                 _PIR1bits 000F9E            ?_write_serial 0001  
              _serial_in 0030                _serial_on 06AA         __CFG_WDTPS$32768 000000  
  __size_of_next_channel 0036           i2write_radio@i 0004                get_data@i 0009  
         ?i2_write_radio 0001                copy_data0 0614             _next_channel 0674  
         ??_write_serial 0060                 __Hrparam 0000               ?_serial_on 0001  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of_get_key 006E  
               _channels 0034                 __ptext10 0000                 _get_data 030A  
          __size_of_main 0070                 _radio_on 0406               _PACKET_KEY 0301  
               int$flags 0048          ??i2_write_radio 0003               _INTCONbits 000FF2  
          ??_write_radio 0062                 intlevel2 0000        i2write_radio@data 0001  
            ??_serial_on 0060              _serial_data 001C     __end_of_write_serial 06E2  
    __end_of_write_radio 0600  
