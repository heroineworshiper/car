/*
 * REMOTE CONTROL TRANSMITTER FOR CAR
 * Copyright (C) 2020-2023 Adam Williams <broadcast at earthling dot net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, 
 * 
 */

// this uses the SI4463 radio
// calibrates stick drift during startup


#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <xc.h>
#include <pic18f14k50.h>



// PIC18F14K50 Configuration Bit Settings

// 'C' source line config statements


// CONFIG1H
//#pragma config FOSC = IRCCLKOUT // Oscillator Selection bits (Internal RC oscillator, CLKOUT function on OSC2)
#pragma config FOSC = IRC // Oscillator Selection bits (Internal RC oscillator, GPIO on OSC2)
#pragma config PLLEN = ON      // 4 X PLL Enable bit

// CONFIG2L
#pragma config PWRTEN = ON     // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config BORV = 22        // Brown-out Reset Voltage bits (VBOR set to 2.2 V nominal)

// CONFIG2H
#pragma config WDTEN = OFF      // Watchdog Timer Enable bit
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config HFOFST = OFF     // HFINTOSC Fast Start-up bit (The system clock is held off until the HFINTOSC is stable.)

// CONFIG4L
#pragma config LVP = OFF        // Single-Supply ICSP Enable bit (Single-Supply ICSP disabled)



// hard coded analog values are required for aural cues
// stick drift is added before computing aural cues so the center is always 128
#define STEERING_CENTER 128
#define STEERING_DEADBAND 3


// limited by song length
#define MAX_STICK_OFFSET 8
#define MIN_STICK_OFFSET -8


// This was generated by the Wireless Development Suite -> 
// Radio Configuration application & copied from 
// Si446x_DirectTX/src/drivers/radio/Si446x/si446x_patch.h 
// Si446x_DirectTX/src/application/radio_config.h

// The project file is si4463_revc2_direct_tx.xml

// You must select generate source -> export custom project
// to generate the right header files.
#include "radio_config.h"


const uint8_t radio_config[] = RADIO_CONFIGURATION_DATA_ARRAY;

// high speed for sounds
#define CLOCKSPEED 32000000
// minimum clockspeed for the baud rate
// PLL doesn't work at this speed
// radio CTS dies below a certain speed
#define CLOCKSPEED2 2000000

// steering sounds
#define USE_STEERING_SOUND

// the tick clock & the number of packets per second
#define HZ 25

// delay between packets
#define TIMER0_VALUE (-CLOCKSPEED / 4 / 32 / HZ)

// samples per packet
#define ADC_PER_PACKET 32


const uint8_t PACKET_KEY[] = 
{
    0x5b, 0xb1, 0x6e, 0x6b, 0x33, 0x30, 0x9e, 0x08
};

const uint8_t DATA_KEY[] =
{
    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55
};



// AN4 steering
// AN5 throttle
// C5 speed+
// C6 speed-
// A5, A4 speaker

#define SPEAKER_LAT1 LATA5
#define SPEAKER_LAT2 LATA4
#define SPEAKER_TRIS1 TRISA5
#define SPEAKER_TRIS2 TRISA4
#define INCREASE_PORT PORTCbits.RC5
#define DECREASE_PORT PORTCbits.RC6

#define LED_LAT LATC7
#define LED_TRIS TRISC7

#define DEBUG_LAT LATC4
#define DEBUG_TRIS TRISC4


// B5 is stuck high when it's an output
#define RADIO_CS_LAT LATB6
#define RADIO_CS_TRIS TRISB6

#define RADIO_SCK_LAT LATC2
#define RADIO_SCK_TRIS TRISC2

#define RADIO_MOSI_LAT LATB4
#define RADIO_MOSI_TRIS TRISB4

#define RADIO_MISO_PORT PORTBbits.RB5
#define RADIO_MISO_TRIS TRISB5

#define RADIO_SDN_LAT LATC4
#define RADIO_SDN_TRIS TRISC4

//    uint16_t debug;



// delay to warm up the radio is 1ms  page 19
#define RADIO_DELAY (-CLOCKSPEED / 4 / 4 / 1000)
#define RADIO_DELAY2 (-CLOCKSPEED2 / 4 / 4 / 1000)
// multiple of clockspeed
#define BAUD 100000


// frequency hopping table derived from the original Si4421 table
// for the truck.
// The Si4421 table rounded down fractional channels.
// 901.2
// 928.7925
// 914.9925
// 908.0925
// 921.8925
// 904.6425
// 925.3425
// 911.5425
// 918.4425

#define TOTAL_CHANNELS 9

// channel indexes caused more dropouts
//#define USE_CHANNELS

#ifdef USE_CHANNELS
// Channel spacing is accurate to only .03khz
// use freq_worksheet.ods to map from the Si4421 table to the Si4463 table.
const uint8_t channels[] = 
{
    0,
    248,
    124,
    62,
    186,
    31,
    217,
    93,
    155
};

#else // USE_CHANNELS

// Base frequency is accurate to .001khz.
// configuration bits corresponding to each base frequency
// RF_FREQ_CONTROL_INTE_8 bytes 4-7
const uint8_t pll_values[] =
{
    0x3B, 0x08, 0xA3, 0xD7,
    0x3C, 0x0F, 0x5B, 0x22,
    0x3B, 0x0F, 0xFE, 0xF9,
    0x3B, 0x0C, 0x50, 0xE5,
    0x3C, 0x0B, 0xAD, 0x0E,
    0x3B, 0x0A, 0x79, 0xDB,
    0x3C, 0x0D, 0x84, 0x18,
    0x3B, 0x0E, 0x27, 0xEF,
    0x3C, 0x09, 0xD6, 0x04
};

// RF_MODEM_AFC_LIMITER_1_3 bytes 5-6
const uint8_t afc_values[] = 
{
    0xAD, 0x80,
    0xB0, 0x80,
    0xAE, 0x80,
    0xAE, 0x80,
    0xAF, 0x80,
    0xAE, 0x80,
    0xAF, 0x80,
    0xAE, 0x80,
    0xAF, 0x80
};

#endif // !USE_CHANNELS




// audio

// index to freq in CPU clocks
#define LATENCY 0
// tuned based on speaker & clockspeed
//#define BASE_FREQ 5232400
#define BASE_FREQ 5886628
#define FREQ_TO_PERIOD(f) (uint16_t)(-BASE_FREQ / 4 / (f * 2) + LATENCY)

const uint16_t freqs[] = 
{
	FREQ_TO_PERIOD(130.81), // C0
	FREQ_TO_PERIOD(138.59), // _Db0
	FREQ_TO_PERIOD(146.83), // _D0
	FREQ_TO_PERIOD(155.56), // _Eb0
	FREQ_TO_PERIOD(164.81), // _E0
	FREQ_TO_PERIOD(174.61), // _F0
	FREQ_TO_PERIOD(185.00), // _Gb0
	FREQ_TO_PERIOD(196.00), // _G0
	FREQ_TO_PERIOD(207.65), // _Ab0
	FREQ_TO_PERIOD(220.00), // _A0
	FREQ_TO_PERIOD(233.08), // _Bb0
	FREQ_TO_PERIOD(246.94), // _B0

	FREQ_TO_PERIOD(261.63), // C1
	FREQ_TO_PERIOD(277.18), 
	FREQ_TO_PERIOD(293.66), 
	FREQ_TO_PERIOD(311.13), 
	FREQ_TO_PERIOD(329.63), 
	FREQ_TO_PERIOD(349.23), 
	FREQ_TO_PERIOD(369.99), 
	FREQ_TO_PERIOD(392.00), // G1
	FREQ_TO_PERIOD(415.30), 
	FREQ_TO_PERIOD(440.00), 
	FREQ_TO_PERIOD(466.16), 
	FREQ_TO_PERIOD(493.88), 

	FREQ_TO_PERIOD(523.251), // C2
	FREQ_TO_PERIOD(554.365),
	FREQ_TO_PERIOD(587.330),
	FREQ_TO_PERIOD(622.254),
	FREQ_TO_PERIOD(659.255),
	FREQ_TO_PERIOD(698.456),
	FREQ_TO_PERIOD(739.989),
	FREQ_TO_PERIOD(783.991),
	FREQ_TO_PERIOD(830.609),
	FREQ_TO_PERIOD(880.000),
	FREQ_TO_PERIOD(932.328),
	FREQ_TO_PERIOD(987.767),

	FREQ_TO_PERIOD(1046.50), // C3
	FREQ_TO_PERIOD(1108.73),
	FREQ_TO_PERIOD(1174.66),
	FREQ_TO_PERIOD(1244.51),
	FREQ_TO_PERIOD(1318.51),
	FREQ_TO_PERIOD(1396.91),
	FREQ_TO_PERIOD(1479.98),
	FREQ_TO_PERIOD(1567.98),
	FREQ_TO_PERIOD(1661.22),
	FREQ_TO_PERIOD(1760.00),
	FREQ_TO_PERIOD(1864.66),
	FREQ_TO_PERIOD(1975.53),

	FREQ_TO_PERIOD(2093.00) // C4
};

// indexes for different notes
#define _C0 0
#define _Db0 1
#define _D0 2
#define _Eb0 3
#define _E0 4
#define _F0 5
#define _Gb0 6
#define _G0 7
#define _Ab0 8
#define _A0 9
#define _Bb0 10
#define _B0 11

#define _C1 12
#define _Db1 13
#define _D1 14
#define _Eb1 15
#define _E1 16
#define _F1 17
#define _Gb1 18
#define _G1 19
#define _Ab1 20
#define _A1 21
#define _Bb1 22
#define _B1 23

#define _C2 24
#define _Db2 25
#define _D2 26
#define _Eb2 27
#define _E2 28
#define _F2 29
#define _Gb2 30
#define _G2 31
#define _Ab2 32
#define _A2 33
#define _Bb2 34
#define _B2 35

#define _C3 36
#define _Db3 37
#define _D3 38
#define _Eb3 39
#define _E3 40
#define _F3 41
#define _Gb3 42
#define _G3 43
#define _Ab3 44
#define _A3 45
#define _Bb3 46
#define _B3 47

#define SONG_REST 0xfe
#define SONG_END 0xff

typedef struct
{
// ticks before next note
    uint8_t delay;   
// note index
    uint8_t freq_index;
} song_t;



typedef union 
{
	struct
	{
		unsigned interrupt_complete : 1;
        unsigned send_packet : 1;
        unsigned playing_sound : 1;
        unsigned increase_pressed : 1;
        unsigned decrease_pressed : 1;
#ifdef USE_STEERING_SOUND
        unsigned is_steering : 1;
#endif
	};
	
	unsigned char value;
} flags_t;

typedef union
{
    struct
    {
        unsigned raw_mode : 1;
        unsigned calibrating : 1;
    };
    unsigned char value;
} flags2_t;

#define DURATION 1
#define DURATION2 4
const song_t increase_tone[] =
{
    { DURATION, _G1 },
    { DURATION, _A1 },
    { DURATION, _B1 },
    { DURATION, _C2 },
    { DURATION, _D2 },
    { DURATION, _E2 },
    { DURATION, _F2 },
    { DURATION, _G2 },
    { 0, SONG_END },
};


const song_t decrease_tone[] =
{
    { DURATION, _G2 },
    { DURATION, _F2 },
    { DURATION, _E2 },
    { DURATION, _D2 },
    { DURATION, _C2 },
    { DURATION, _B1 },
    { DURATION, _A1 },
    { DURATION, _G1 },
    { 0, SONG_END },
};

const song_t flat_tone[] =
{
    { DURATION, _G1 },
    { DURATION, _G2 },
    { DURATION, _G1 },
    { DURATION, _G2 },
    { DURATION, _G1 },
    { DURATION, _G2 },
    { DURATION, _G1 },
    { DURATION, _G2 },
    { DURATION, _G1 },
    { DURATION, _G2 },
    { DURATION, _G1 },
    { DURATION, _G2 },
    { DURATION, _G1 },
    { DURATION, _G2 },
    { DURATION, _G1 },
    { DURATION, _G2 },
    { 0, SONG_END },
};

const song_t steering_sound[] =
{
    { DURATION * 1, _C2 },
    { DURATION * 3, SONG_REST },
    { DURATION * 1, _B1 },
    { DURATION * 3, SONG_REST },
    { 0, SONG_END }
};

const song_t calibration_tone[] =
{
    { DURATION * 5, _G1 },
    { DURATION * 5, _Gb1 },
    { DURATION * 5, _G0 },
    { DURATION * 5, _Db1 },
    { DURATION * 5, _D1 },
    { DURATION * 5, _Gb1 },
    { DURATION * 5, _D1 },
    { 0, SONG_END }
};

#define MAX_SONG 32
song_t song_buffer[MAX_SONG];

flags_t flags;
flags2_t flags2; 
uint8_t tick = 0;
// add fake glitches for testing
uint8_t glitch_counter = 0;
uint16_t song_tick = 0;
uint8_t song_offset = 0;
uint8_t current_channel = 0;
uint16_t current_note = 0;
uint16_t current_delay = 0;


// hall effect sensors
uint16_t steering_accum = 0;
uint16_t steering_count = 0;
uint16_t throttle_accum = 0;
uint16_t throttle_count = 0;
uint8_t prev_steering = 0;
int8_t speed_offset = 0;
// stick drifts 0-255
int8_t throttle_offset = 0;
int8_t steering_offset = 0; 
// multiple calibration packets
uint8_t calibration_count = 0;
uint16_t temp;
// limited by song length
#define MIN_SPEED_OFFSET -8
#define MAX_SPEED_OFFSET 8






// must be unrolled to work at low clockspeed
void si4463_write(uint8_t data)
{
// It really needs the ? 1 : 0
    RADIO_MOSI_LAT = (data & 0x80) ? 1 : 0;
    RADIO_SCK_LAT = 1;
    RADIO_SCK_LAT = 0;
    RADIO_MOSI_LAT = (data & 0x40) ? 1 : 0;
    RADIO_SCK_LAT = 1;
    RADIO_SCK_LAT = 0;
    RADIO_MOSI_LAT = (data & 0x20) ? 1 : 0;
    RADIO_SCK_LAT = 1;
    RADIO_SCK_LAT = 0;
    RADIO_MOSI_LAT = (data & 0x10) ? 1 : 0;
    RADIO_SCK_LAT = 1;
    RADIO_SCK_LAT = 0;
    RADIO_MOSI_LAT = (data & 0x8) ? 1 : 0;
    RADIO_SCK_LAT = 1;
    RADIO_SCK_LAT = 0;
    RADIO_MOSI_LAT = (data & 0x4) ? 1 : 0;
    RADIO_SCK_LAT = 1;
    RADIO_SCK_LAT = 0;
    RADIO_MOSI_LAT = (data & 0x2) ? 1 : 0;
    RADIO_SCK_LAT = 1;
    RADIO_SCK_LAT = 0;
    RADIO_MOSI_LAT = (data & 0x1) ? 1 : 0;
    RADIO_SCK_LAT = 1;
    RADIO_SCK_LAT = 0;
}

uint8_t si4463_read()
{
    uint8_t data = 0;
    RADIO_MOSI_LAT = 0;
    RADIO_SCK_LAT = 1;
    if(RADIO_MISO_PORT) data |= 0x80;
    RADIO_SCK_LAT = 0;
    RADIO_SCK_LAT = 1;
    if(RADIO_MISO_PORT) data |= 0x40;
    RADIO_SCK_LAT = 0;
    RADIO_SCK_LAT = 1;
    if(RADIO_MISO_PORT) data |= 0x20;
    RADIO_SCK_LAT = 0;
    RADIO_SCK_LAT = 1;
    if(RADIO_MISO_PORT) data |= 0x10;
    RADIO_SCK_LAT = 0;
    RADIO_SCK_LAT = 1;
    if(RADIO_MISO_PORT) data |= 0x8;
    RADIO_SCK_LAT = 0;
    RADIO_SCK_LAT = 1;
    if(RADIO_MISO_PORT) data |= 0x4;
    RADIO_SCK_LAT = 0;
    RADIO_SCK_LAT = 1;
    if(RADIO_MISO_PORT) data |= 0x2;
    RADIO_SCK_LAT = 0;
    RADIO_SCK_LAT = 1;
    if(RADIO_MISO_PORT) data |= 0x1;
    RADIO_SCK_LAT = 0;
    return data;
}

// wait for clear to send
void si4463_cts()
{
    uint16_t retries = 10000;
    while(retries > 0)
    {
        RADIO_CS_LAT = 0;
        si4463_write(0x44);
        uint8_t cts = si4463_read();
        RADIO_CS_LAT = 1;
        
        if(cts == 0xff) break;
        retries--;
    }

    if(retries == 0)
    {
        LED_LAT = 0;
        asm("reset");
    }
}

// radio_comm_SendCmdGetResp
// send the command without CTS
// never called with a response byte count so we neglect the response
void si4463_command(const uint8_t *ptr, uint8_t len)
{
    RADIO_SCK_LAT = 0;
    RADIO_CS_LAT = 0;
    uint8_t i;
    for(i = 0; i < len; i++)
    {
        si4463_write(*ptr++);
    }
    RADIO_CS_LAT = 1;
}


void init_radio()
{
// enable outputs
    RADIO_CS_LAT = 1;
    RADIO_CS_TRIS = 0;
    
    RADIO_MOSI_LAT = 0;
    RADIO_MOSI_TRIS = 0;
    
    RADIO_SCK_LAT = 0;
    RADIO_SCK_TRIS = 0;


// toggle shutdown pin to satisfy POR
    RADIO_SDN_LAT = 1;
    RADIO_SDN_TRIS = 0;

    uint8_t init_delay = 0;
    while(init_delay < HZ / 4)
    {
        if(INTCONbits.TMR0IF)
        {
            TMR0 = TIMER0_VALUE;
            INTCONbits.TMR0IF = 0;
            init_delay++;
        }
    }

    RADIO_SDN_LAT = 0;

    init_delay = 0;
    while(init_delay < HZ / 4)
    {
        if(INTCONbits.TMR0IF)
        {
            TMR0 = TIMER0_VALUE;
            INTCONbits.TMR0IF = 0;
            init_delay++;
        }
    }

// parse radio config data
// si446x_configuration_init
    const uint8_t *ptr = radio_config;
    while(*ptr != 0)
    {
        uint8_t len = *ptr++;
        si4463_command(ptr, len);
        si4463_cts();
        ptr += len;
    }
}

void radio_on()
{
// enable serial port 10mA
    TXSTA = 0b00100100;

    current_channel++;
    if(current_channel >= TOTAL_CHANNELS)
    {
        current_channel = 0;
    }

#ifndef USE_CHANNELS
    uint8_t rf_freq_control_inte_8[] = { RF_FREQ_CONTROL_INTE_8 };
    uint8_t rf_modem_afc_limiter_1_3[] = { RF_MODEM_AFC_LIMITER_1_3 };
    const uint8_t tx_command[] = { 0x31, 0, 0, 0, 0, 0, 0 };
    rf_freq_control_inte_8[4] = pll_values[current_channel * 4 + 0];
    rf_freq_control_inte_8[5] = pll_values[current_channel * 4 + 1];
    rf_freq_control_inte_8[6] = pll_values[current_channel * 4 + 2];
    rf_freq_control_inte_8[7] = pll_values[current_channel * 4 + 3];
    rf_modem_afc_limiter_1_3[5] = afc_values[current_channel * 2 + 0];
    rf_modem_afc_limiter_1_3[6] = afc_values[current_channel * 2 + 1];
    si4463_command(rf_freq_control_inte_8, sizeof(rf_freq_control_inte_8));
    si4463_cts();
    si4463_command(rf_modem_afc_limiter_1_3, sizeof(rf_modem_afc_limiter_1_3));
    si4463_cts();

    
#else // !USE_CHANNELS
    uint8_t tx_command[] = { 0x31, 0, 0, 0, 0, 0, 0 };
    tx_command[1] = channels[current_channel];
// no need to wait for CTS
#endif // USE_CHANNELS

    si4463_command(tx_command, sizeof(tx_command));

    

// warm up.  1:4 prescaler for 32Mhz clock
// DEBUG
//LED_LAT = 0;
    T1CON = 0b10100001;
    TMR1 = RADIO_DELAY;


    PIR1bits.TMR1IF = 0;
    while(!PIR1bits.TMR1IF)
    {
    }
    T1CON = 0b10000000;
// DEBUG
//LED_LAT = 1;
}

void radio_off()
{
// disable serial port 10mA
    TXSTA = 0b00000100;


// GPIO's must be disabled
    const uint8_t standby_command[] =
    {
        0x34,
        1, // sleep state.  page 40
    };

// no need to wait for CTS
    si4463_command(standby_command, sizeof(standby_command));
}

void init_serial()
{
// serial port
    TXSTA = 0b00100100;
    RCSTA = 0b10000000;
    BAUDCON = 0b00001000;
// baud = clockspeed / (4 * (SPBRG + 1))
    SPBRG = CLOCKSPEED / 4 / BAUD - 1;
//    SPBRG = CLOCKSPEED2 / 4 / BAUD - 1;
}

void flush_serial()
{
    while(!PIR1bits.TXIF)
    {
    }

    while(!TXSTAbits.TRMT)
    {
    }
}

void write_serial(uint8_t value)
{
    while(!PIR1bits.TXIF)
    {
    }

    TXREG = value;    
}


void play_song()
{


    song_tick = 0;
    song_offset = 0;
    flags.playing_sound = 1;
    current_note = freqs[song_buffer[0].freq_index];
    current_delay = song_buffer[0].delay;
    T3CON = 0b10000001;
    TMR3 = current_note;
    PIR2bits.TMR3IF = 0;
    PIE2bits.TMR3IE = 1;
    SPEAKER_TRIS1 = 0;
    SPEAKER_TRIS2 = 0;
    SPEAKER_LAT1 = 1;
    SPEAKER_LAT2 = 0;
}

void stop_song()
{
    flags.playing_sound = 0;
// turn off speaker timer
    T3CON = 0b10000000;
    PIE2bits.TMR3IE = 0;
    PIR2bits.TMR3IF = 0;
    SPEAKER_TRIS1 = 1;
    SPEAKER_TRIS2 = 1;
    SPEAKER_LAT1 = 0;
    SPEAKER_LAT2 = 0;
}

// have to copy the sound in order to add the tones for the current speed
uint8_t copy_song(const song_t *src)
{
    uint8_t i = 0;
    while(1)
    {
        song_buffer[i] = src[i];
        if(src[i].freq_index == SONG_END)
        {
            i++;
            break;
        }
        i++;
    }
    
    return i;
}

void play_calibration_tone()
{
    copy_song(calibration_tone);
    play_song();
}

// standard offset tone for stick drift & speed
void play_offset(int8_t offset)
{
    if(offset > 0)
    {
        uint8_t i = copy_song(increase_tone);
        uint8_t j;
// overwrite the end code
        i--;
        for(j = 0; j < offset && i <= MAX_SONG - 3; j++)
        {
            song_buffer[i].delay = HZ * 1 / 5;
            song_buffer[i].freq_index = SONG_REST;
//            song_buffer[i].freq_index = _C0;
            i++;
            song_buffer[i].delay = HZ * 1 / 5;
            song_buffer[i].freq_index = _G2;
            i++;
        }
        song_buffer[i].delay = 0;
        song_buffer[i].freq_index = SONG_END;
    }
    else
    if(offset < 0)
    {
        uint8_t i = copy_song(decrease_tone);
        uint8_t j;
// overwrite the end code
        i--;
        for(j = 0; j < -offset && i <= MAX_SONG - 3; j++)
        {
            song_buffer[i].delay = HZ * 1 / 5;
            song_buffer[i].freq_index = SONG_REST;
//            song_buffer[i].freq_index = _C1;
            i++;
            song_buffer[i].delay = HZ * 1 / 5;
            song_buffer[i].freq_index = _G1;
            i++;
        }

        song_buffer[i].delay = 0;
        song_buffer[i].freq_index = SONG_END;
    }
    else
    {
        copy_song(flat_tone);
    }

    play_song();
// cancel steering sound
    flags.is_steering = 0;
}


void write_byte(uint8_t address, uint8_t value)
{
    EEADR = address;
    EEDATA = value;
    EECON1bits.EEPGD = 0;
    EECON1bits.CFGS = 0;
    EECON1bits.WREN = 1;

    INTCONbits.GIE = 0;
    EECON2 = 0x55;
    EECON2 = 0xaa;
    EECON1bits.WR = 1;
// wait for write
    while(EECON1bits.WR) 
        ;
    
    INTCONbits.GIE = 1;
    EECON1bits.WREN = 0;
}

uint8_t read_byte(uint8_t address)
{
    EEADR = address;
    EECON1bits.EEPGD = 0;
    EECON1bits.CFGS = 0;
    EECON1bits.RD = 1;
    return EEDATA;
}

void write_settings()
{
// no reason for the address beside wear leveling
    write_byte(8, speed_offset);
}

void read_settings()
{
    speed_offset = read_byte(8);
    if(speed_offset > MAX_SPEED_OFFSET ||
        speed_offset < MIN_SPEED_OFFSET)
    {
        speed_offset = 0;
    }
}

void handle_speed_increase()
{
    speed_offset++;
    if(speed_offset > MAX_SPEED_OFFSET)
    {
        speed_offset = MAX_SPEED_OFFSET;
    }
    
    play_offset(speed_offset);
    write_settings();
}

void handle_speed_decrease()
{
    speed_offset--;
    if(speed_offset < MIN_SPEED_OFFSET)
    {
        speed_offset = MIN_SPEED_OFFSET;
    }
    
    play_offset(speed_offset);
    write_settings();
}


#define DEBOUNCE(flag, pin, handler) \
{ \
    if(flag) \
    { \
/* button released */ \
        if(pin) \
        { \
            flag = 0; \
        } \
    } \
    else \
    { \
        if(!pin) \
        { \
/* button pressed */ \
            flag = 1; \
            handler;  \
        } \
    } \
}

void main()
{
// high clockspeed
    OSCCON = 0b11100000;


	flags.value = 0;
    flags2.value = 0;
    flags2.calibrating = 1;

    tick = 0;


// LED on
    LED_LAT = 1;
    LED_TRIS = 0;
    SPEAKER_TRIS1 = 1;
    SPEAKER_TRIS2 = 1;


//LATBbits.LATB5 = 0;
//TRISBbits.TRISB5 = 0;


// start ADC
    ANSEL = 0b00110000;
    ANSELH = 0b00000000;
    ADCON0 = 0b00010001;
// ADC clock is Fosc/64
    ADCON2 = 0b10111110;
    PIR1bits.ADIF = 0;
    PIE1bits.ADIE = 1;

    init_serial();

    read_settings();

// mane timer
// 1:32 prescaler for 32Mhz clock
// 1:2 prescaler for 2Mhz clock
    T0CON = 0b10000100;
    TMR0 = TIMER0_VALUE;


    init_radio();


// DEBUG
// radio_on();
// radio_off();
// //RADIO_SDN_LAT = 1;
// LED_LAT = 0;
// TXSTA = 0b00000100;
// OSCCON = 0b11000000;
// while(1) Sleep();

    INTCON = 0b11100000;

// get calibration mode from buttons
    if(!INCREASE_PORT || !DECREASE_PORT)
    {
        flags2.raw_mode = 1;
        play_calibration_tone();
    }
    else
    {
        play_offset(speed_offset);
    }

// start getting stick values
    ADCON0bits.GO = 1;

    while(1)
    {
        if(flags.send_packet)
        {
            LED_LAT = !LED_LAT;
// DEBUG
//LED_LAT = 1;

// DEBUG
// #define FAKE_GLITCHES
// #ifdef FAKE_GLITCHES
// glitch_counter++;
// if(glitch_counter >= TOTAL_CHANNELS) glitch_counter = 0;
// #endif

            flags.send_packet = 0;


            uint16_t steering_value = steering_accum / steering_count / 4;
            uint16_t throttle_value = throttle_accum / throttle_count / 4;
            uint8_t code_byte = (flags2.raw_mode << 7) | 
                (speed_offset & 0x7f);

// detect stick centers
// LDO drifts when it starts, so this is using a fudge factor
            if(flags2.calibrating && !flags2.raw_mode)
            {
#define LDO_FUDGE 1
                throttle_offset = 128 - throttle_value - LDO_FUDGE;
                steering_offset = 128 - steering_value - LDO_FUDGE;
                flags2.calibrating = 0;
            }


// apply stick drift to accumulated values
            if(!flags2.raw_mode && !flags2.calibrating)
            {
                steering_value += steering_offset;
                throttle_value += throttle_offset;
            }


// throw away 1st packet
            radio_on();


// TODO: send multiple packets.  Requires a receiver change
// delay for amplifier & framing errors.  Takes more power.
            write_serial(0xff);
            write_serial(0xff);
            write_serial(0xff);
            write_serial(0xff);

            uint8_t i;
            for(i = 0; i < sizeof(PACKET_KEY); i++)
            {
                write_serial(PACKET_KEY[i]);
            }


            write_serial(steering_value ^ DATA_KEY[0]);
            write_serial(throttle_value ^ DATA_KEY[1]);
            write_serial(code_byte ^ DATA_KEY[2]);

            write_serial(steering_value ^ DATA_KEY[3]);
            write_serial(throttle_value ^ DATA_KEY[4]);
            write_serial(code_byte ^ DATA_KEY[5]);

            write_serial(steering_value ^ DATA_KEY[6]);
            write_serial(throttle_value ^ DATA_KEY[7]);
            write_serial(code_byte ^ DATA_KEY[8]);

            write_serial(steering_value ^ DATA_KEY[9]);
            write_serial(throttle_value ^ DATA_KEY[10]);
            write_serial(code_byte ^ DATA_KEY[11]);

            flush_serial();
            radio_off();


// DEBUG
//LED_LAT = 0;

            if(!flags2.raw_mode)
            {
// don't trap these if they start up pressed
                DEBOUNCE(flags.increase_pressed, \
                    INCREASE_PORT, \
                    handle_speed_increase())
                DEBOUNCE(flags.decrease_pressed, \
                    DECREASE_PORT, \
                    handle_speed_decrease())
            }

            steering_accum = 0;
            throttle_accum = 0;
            steering_count = 0;
            throttle_count = 0;


// advance song
            if(flags.playing_sound)
            {
                song_tick++;
                if(song_tick >= current_delay)
                {
                    song_offset++;
                    song_t *ptr = &song_buffer[song_offset];
                    if(ptr->freq_index == SONG_END)
                    {
#ifdef USE_STEERING_SOUND
// loop the steering sound
                        if(flags.is_steering)
                        {
                            copy_song(steering_sound);
                            play_song();
                        }
                        else
#endif
                            stop_song();
                    }
                    else
                    {
                        song_tick = 0;
                        current_delay = ptr->delay;
                        if(ptr->freq_index == SONG_REST)
                        {
                            SPEAKER_TRIS1 = 1;
                            SPEAKER_TRIS2 = 1;
                        }
                        else
                        {
                            current_note = freqs[ptr->freq_index];
                            PIR2bits.TMR3IF = 0;
                            PIE2bits.TMR3IE = 1;
                            TMR3 = current_note;
                            SPEAKER_TRIS1 = 0;
                            SPEAKER_TRIS2 = 0;
                        }
                    }
                }
            }


#ifdef USE_STEERING_SOUND
// start song after advancing
            uint8_t steering2 = 255 - steering_value;
// play steering sound once
//             if(!flags.playing_sound && 
//                 ((steering2 > STEERING_CENTER + STEERING_DEADBAND && prev_steering <= STEERING_CENTER + STEERING_DEADBAND) ||
//                 (steering2 < STEERING_CENTER - STEERING_DEADBAND && prev_steering >= STEERING_CENTER - STEERING_DEADBAND)))
//             {
//                 copy_song(click);
//                 play_song();
//             }
//            prev_steering = steering2;

            if(!flags2.raw_mode)
            {
// play steering sound as long as it's steering
// don't trap these if they're not stick drift compensated
                if(!flags.playing_sound && 
                    ((steering2 > STEERING_CENTER + STEERING_DEADBAND) ||
                    (steering2 < STEERING_CENTER - STEERING_DEADBAND)))
                {
                    copy_song(steering_sound);
                    play_song();
                    flags.is_steering = 1;
                }
                else
                if(flags.is_steering && 
                    steering2 >= STEERING_CENTER - STEERING_DEADBAND &&
                    steering2 <= STEERING_CENTER + STEERING_DEADBAND)
                {
                    flags.is_steering = 0;
                    stop_song();
                }
            }
#endif // USE_STEERING_SOUND




// start a new set of ADC
            ADCON0bits.GO = 1;
        }
    }
    
}

void __interrupt(low_priority) isr1()
{
}

void __interrupt(high_priority) isr()
{
    flags.interrupt_complete = 0;
	while(!flags.interrupt_complete)
	{
		flags.interrupt_complete = 1;

// tick counter
		if(INTCONbits.TMR0IF)
		{
			INTCONbits.TMR0IF = 0;
            TMR0 = TIMER0_VALUE;
			flags.interrupt_complete = 0;
            tick++;

// send packet
// cue the bottom half
            flags.send_packet = 1;
        }


// ADC
        if(PIR1bits.ADIF)
        {
// DEBUG
//LED_LAT = !LED_LAT;
            flags.interrupt_complete = 0;
            PIR1bits.ADIF = 0;
            
            if(ADCON0 == 0b00010001)
            {
                ADCON0 = 0b00010101;

                steering_accum += ADRES;
                steering_count++;
            }
            else
            {
                ADCON0 = 0b00010001;

                throttle_accum += ADRES;
                throttle_count++;
            }

// stop sampling before the next packet
            if(throttle_count < ADC_PER_PACKET) ADCON0bits.GO = 1;
        }

// sound
        if(PIR2bits.TMR3IF)
        {
            flags.interrupt_complete = 0;
            PIR2bits.TMR3IF = 0;
            
            if(flags.playing_sound)
            {
                TMR3 = current_note;
                SPEAKER_LAT1 = !SPEAKER_LAT1;
                SPEAKER_LAT2 = !SPEAKER_LAT2;
            }
        }
    }
}










