/*
 * Leg test program
 *
 * Copyright (C) 2017 Adam Williams <broadcast at earthling dot net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */

// compile with make leg.hex
// program with make leg_isp
// UART is 9600 baud

// pin functions
// 1 - field 3 N
// 2 - field 3 P
// 9 - field 1 P
// 11 - field 2 P
// 30 - field 1 N
// 31 - field 2 N
// 32 - debug RX
// 13 - debug TX



#include "leg.h"
#include "avr_debug.h"
#include <string.h> // memcpy


// created by tables.c
const uint8_t sin_table[] = {
	0x80, 0x83, 0x86, 0x89, 0x8c, 0x8f, 0x92, 0x95, 
	0x98, 0x9c, 0x9f, 0xa2, 0xa5, 0xa8, 0xab, 0xae, 
	0xb0, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4, 
	0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8, 
	0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 
	0xea, 0xec, 0xed, 0xef, 0xf0, 0xf2, 0xf3, 0xf5, 
	0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfc, 
	0xfd, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 
	0xfd, 0xfc, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 
	0xf6, 0xf5, 0xf3, 0xf2, 0xf0, 0xef, 0xed, 0xec, 
	0xea, 0xe8, 0xe6, 0xe4, 0xe2, 0xe0, 0xde, 0xdc, 
	0xda, 0xd8, 0xd5, 0xd3, 0xd1, 0xce, 0xcc, 0xc9, 
	0xc7, 0xc4, 0xc1, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3, 
	0xb0, 0xae, 0xab, 0xa8, 0xa5, 0xa2, 0x9f, 0x9c, 
	0x98, 0x95, 0x92, 0x8f, 0x8c, 0x89, 0x86, 0x83, 
	0x80, 0x7c, 0x79, 0x76, 0x73, 0x70, 0x6d, 0x6a, 
	0x67, 0x63, 0x60, 0x5d, 0x5a, 0x57, 0x54, 0x51, 
	0x4f, 0x4c, 0x49, 0x46, 0x43, 0x40, 0x3e, 0x3b, 
	0x38, 0x36, 0x33, 0x31, 0x2e, 0x2c, 0x2a, 0x27, 
	0x25, 0x23, 0x21, 0x1f, 0x1d, 0x1b, 0x19, 0x17, 
	0x15, 0x13, 0x12, 0x10, 0x0f, 0x0d, 0x0c, 0x0a, 
	0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03, 
	0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x02, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 
	0x09, 0x0a, 0x0c, 0x0d, 0x0f, 0x10, 0x12, 0x13, 
	0x15, 0x17, 0x19, 0x1b, 0x1d, 0x1f, 0x21, 0x23, 
	0x25, 0x27, 0x2a, 0x2c, 0x2e, 0x31, 0x33, 0x36, 
	0x38, 0x3b, 0x3e, 0x40, 0x43, 0x46, 0x49, 0x4c, 
	0x4f, 0x51, 0x54, 0x57, 0x5a, 0x5d, 0x60, 0x63, 
	0x67, 0x6a, 0x6d, 0x70, 0x73, 0x76, 0x79, 0x7c
};



#define SIN_TABLE_SIZE (sizeof(sin_table))
// pins for the FETs
#define P_FET1	5
#define P_FET2	7
#define P_FET3	4
#define N_FET1	0
#define N_FET2	1
#define N_FET3	3

// the table run by the interrupt handler
typedef struct
{
// time until the next interrupt
	uint8_t time;
// value of the PORT register
	uint8_t value;
} pwm_table_t;

// temporary table used for calculating the pwm table
typedef struct
{
// time since overflow
	uint16_t time;
// Ps to turn off
	uint8_t p_mask;
// Ns to turn on
	uint8_t n_mask;
} event_table_t;

#define EVENTS 6
event_table_t event_table[EVENTS];
uint8_t total_events;

// the motor phase 0 - 255
uint8_t phase;
#define MIN_POWER 2
// tweek this to get the right Hz
#define MAX_POWER 128
// the power
uint8_t power = MAX_POWER;
//#define DEADBAND 0x68
#define DEADBAND 0xc

// pwm values derived from the motor phase 0 - 255
uint8_t pwm1;
uint8_t pwm2;
uint8_t pwm3;

// the PWM program
// 1 for overflow, 6 for FET changes
#define TABLE_SIZE 7
pwm_table_t pwm_table[TABLE_SIZE];
// entry in pwm_table we're playing back
pwm_table_t *pwm_ptr;
pwm_table_t new_table[TABLE_SIZE];
uint8_t have_new_table = 0;

// timer 2 overflow
ISR(TIMER2_OVF_vect)
{

// set the FET gates
	PORTD = pwm_ptr->value;
// set the next delay
	TCNT2 = pwm_ptr->time;

// next program line
	pwm_ptr++;

// new cycle begins
	if(pwm_ptr >= &pwm_table[TABLE_SIZE])
	{
		pwm_ptr = &pwm_table[0];

// copy new program in
		if(have_new_table)
		{
			memcpy(pwm_table, new_table, TABLE_SIZE * sizeof(pwm_table_t));
			have_new_table = 0;
		}
	}
}

void put_event(uint16_t time, uint8_t p_mask, uint8_t n_mask)
{
	uint8_t i, j;
	for(i = 0; i < total_events; i++)
	{
		if(event_table[i].time > time)
		{
// push back later events
			for(j = total_events - 1; 1; j--)
			{
				event_table[j + 1] = event_table[j];
// can never be <= i
				if(j == i) break;
			}
			break;
		}
	}

// store new event
	event_table[i].time = time;
	event_table[i].p_mask = p_mask;
	event_table[i].n_mask = n_mask;
	total_events++;
}

// create the PWM table
void phase_to_pwm()
{
	uint8_t i;
	if(power < MIN_POWER)
	{
		power = MIN_POWER;
	}


// absolute times of FET switching
	pwm1 = (uint8_t)(((uint16_t)sin_table[(uint8_t)(phase)]) * 
		power / 
		0xff);
	pwm2 = (uint8_t)(((uint16_t)sin_table[(uint8_t)(phase + 85)]) * 
		power / 
		0xff);
	pwm3 = (uint8_t)(((uint16_t)sin_table[(uint8_t)(phase + 170)]) * 
		power / 
		0xff);

// DEBUG
pwm1 = 32;
pwm2 = 64;
pwm3 = 1;

// make the temporary table
	total_events = 0;
	put_event((uint16_t)pwm1, (uint8_t)(~(1 << P_FET1)), 0);
	put_event(((uint16_t)pwm1) + DEADBAND, 0xff, (1 << N_FET1));
	put_event((uint16_t)pwm2, (uint8_t)(~(1 << P_FET2)), 0);
	put_event(((uint16_t)pwm2) + DEADBAND, 0xff, (1 << N_FET2));
	put_event((uint16_t)pwm3, (uint8_t)(~(1 << P_FET3)), 0);
	put_event(((uint16_t)pwm3) + DEADBAND, 0xff, (1 << N_FET3));

	for(i = 0; i < total_events; i++)
	{
		print_text("time=");
		print_number(event_table[i].time);
		print_text("\tp_mask=");
		print_bin(event_table[i].p_mask);
		print_text("\tn_mask=");
		print_bin(event_table[i].n_mask);
		flush_serial();
		send_byte('\n');
	}



// RX_PIN must always be high to enable the pullup
	uint8_t current_port = (1 << RX_PIN) |
		(1 << P_FET1) |
		(1 << P_FET2) |
		(1 << P_FET3);
// the overflow interrupt
	pwm_table_t *ptr = &new_table[0];
	ptr->time = 0xff - event_table[0].time;
	ptr->value = current_port;
	ptr++;
	
	uint8_t new_time;
	uint8_t new_value;
	for(i = 0; i < EVENTS; i++)
	{
		event_table_t *event_ptr = &event_table[i];
		current_port &= event_ptr->p_mask;
		current_port |= event_ptr->n_mask;
		
		uint8_t diff = 0;
		if(i < EVENTS - 1)
		{
			diff = (event_table[i + 1].time - event_ptr->time);
			ptr->time = 0xff - diff;
		}
		else
		if(event_ptr->time > MAX_POWER)
		{
			diff = 0;
		}
		else
		{
			diff = MAX_POWER - event_ptr->time;
		}
		
		ptr->time = 0xff - diff;
		ptr->value = current_port;
		ptr++;
	}


// make the interrupt handler copy new_table over
	have_new_table = 1;	
}


void dump_pwm()
{
	print_text("dump_pwm \n");
	flush_serial();
	print_text("pwm1=");
	print_number(pwm1);
	print_text("pwm2=");
	print_number(pwm2);
	print_text("pwm3=");
	print_number(pwm3);
	flush_serial();
	send_byte('\n');

	uint8_t i;
	for(i = 0; i < TABLE_SIZE; i++)
	{
		print_text("delay=");
		print_number(0xff - new_table[i].time);
		print_text("\tvalue=");
		print_bin(new_table[i].value);
		flush_serial();
		send_byte('\n');
	}
}

void pwm_on()
{
// enable the overflow interrupt & PWM
	bitSet(TIMSK, TOIE2);
}

void pwm_off()
{
	bitClear(TIMSK, TOIE2);
	PORTD = (1 << RX_PIN);
}

void jump()
{
	int i, j;
	phase = 0;
	power = 192;
	pwm_on();



	for(i = 0; i < 100; i++)
	{
		delayMicroseconds(1000);
		uint8_t step = i / 8;
		if(step > 12) step = 12;
		if(step < 1) step = 1;
		phase += step;
		phase_to_pwm();
	}


	for(i = 0; i < 50; i++)
	{
		delayMicroseconds(1000);
	}

	pwm_off();
}

void hold()
{
	int i;
	phase = 0;
	power = 4;
	pwm_on();

	for(i = 0; i < 500; i++)
	{
		delayMicroseconds(2000);
		phase += 1;
		if(i == 499) power = MIN_POWER;
		phase_to_pwm();
	}

	
	
// hold it
	for(i = 0; i < 1000; i++)
	{
		delayMicroseconds(1000);
	}

	pwm_off();
//	dump_pwm();
}


int main()
{
// disable watchdog.  Disabled by default.
//	WDTCR = (1 << 4) | (1 << 3);
//	WDTCR = (1 << 3) | (1);
	



	

	init_serial();

// delay
	int i;
	for(i = 0; i < 1000; i++)
	{
		delayMicroseconds(1000);
	}



// set up the FETs
	bitClear(PORTD, N_FET1);
	bitClear(PORTD, N_FET2);
	bitClear(PORTD, N_FET3);
	bitClear(PORTD, P_FET1);
	bitClear(PORTD, P_FET2);
	bitClear(PORTD, P_FET3);

// enable the FET outputs.  Makes no difference, because of pullups.
 	bitSet(DDRD, N_FET1);
 	bitSet(DDRD, N_FET2);
 	bitSet(DDRD, N_FET3);
 	bitSet(DDRD, P_FET1);
 	bitSet(DDRD, P_FET2);
 	bitSet(DDRD, P_FET3);


	power = MAX_POWER;
	phase = 0xc0 + 85;
	pwm_ptr = &pwm_table[0];
	pwm_off();




// set the prescaler for PWM.  
//	TCCR2 = 0x1; // 15 kHz
	TCCR2 = 0x2; // 5.7 kHz
//  TCCR2 = 0x3; // 1.5 kHz
//	TCCR2 = 0x4; // 800Hz

// enable interrupts
	sei();
	

	print_text("****\nWelcome to the leg controller\n");
	flush_serial();



	phase_to_pwm();
	dump_pwm();

	pwm_on();


	while(1)
	{
//		for(i = 0; i < 10; i++)
//		{
//			delayMicroseconds(1000);
//		}
//		
//		phase++;
//		phase_to_pwm();

		if(have_uart_in)
		{
			have_uart_in = 0;
			
			send_byte(uart_in);
			switch(uart_in)
			{
				case '+':
					phase++;
					phase_to_pwm();
					dump_pwm();
					break;
				case '-':
					phase--;
					phase_to_pwm();
					dump_pwm();
					break;
			}
		}
	}


// user input
	while(1)
	{
		if(have_uart_in)
		{
			have_uart_in = 0;
			
			send_byte(uart_in);
			
			switch(uart_in)
			{
				case '1':
					jump();
					break;

				case '2':
					hold();
					break;

// can't receive when PWM is on, so just take any character
//				default:
//					pwm_off();
//					break;
			}
			
//			print_hex(uart_in);
//			flush_serial();
//			jump();
		}
	}


#if 0
	while(1)
	{
		for(i = 0; i < 1; i++)
		{
			delayMicroseconds(1000);
		}
		
		bitSet(TX_PORT, TX_PIN); // DEBUG
		phase++;
		phase_to_pwm();
	}
#endif


}






















