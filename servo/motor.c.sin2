/*
 * STEPPER CONTROL FOR BRUSHLESS SERVO
 * Copyright (C) 2022 Adam Williams <broadcast at earthling dot net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */

// The PWM input must be soldered to the UART pin P0.5.  Then, the
// PWM lowpass filtering capacitor must be removed.

// Write a 0 - SIN_TOTAL phase offset to the UART or 
// COAST_MOTOR to float the MOSFETS
// GROUND_MOTOR to connect the MOSFETS to ground


#include <c8051f330.h>                    // SFR declarations
#include <stdint.h>

#include "motor.h"

#define BAUD 115200

// mosfet pins
sbit PFET0 = P1^5;
sbit PFET1 = P1^4;
sbit PFET2 = P1^6;
sbit NFET0 = P1^1;
sbit NFET1 = P1^0;
sbit NFET2 = P1^2;
// PWM = P0.7
// UART RX = P0.5
// UART TX = P0.4

// debug
sbit LED = P0^3;                          // LED='1' means ON

// created by tables.c
uint16_t code sin_table[] = {
	0xfe81, 0xfe8b, 0xfe95, 0xfe9e, 0xfea8, 0xfeb1, 0xfebb, 0xfec4, 
	0xfecd, 0xfed7, 0xfee0, 0xfee9, 0xfef2, 0xfefb, 0xff04, 0xff0d, 
	0xff16, 0xff1f, 0xff27, 0xff30, 0xff38, 0xff41, 0xff49, 0xff51, 
	0xff59, 0xff61, 0xff68, 0xff70, 0xff77, 0xff7f, 0xff86, 0xff8d, 
	0xff93, 0xff9a, 0xffa0, 0xffa7, 0xffad, 0xffb2, 0xffb8, 0xffbe, 
	0xffc3, 0xffc8, 0xffcd, 0xffd1, 0xffd6, 0xffda, 0xffde, 0xffe2, 
	0xffe6, 0xffe9, 0xffec, 0xffef, 0xfff2, 0xfff4, 0xfff6, 0xfff8, 
	0xfffa, 0xfffc, 0xfffd, 0xfffe, 0xffff, 0xffff, 0xffff, 0xffff, 
	0xffff, 0xffff, 0xffff, 0xfffe, 0xfffd, 0xfffc, 0xfffa, 0xfff8, 
	0xfff6, 0xfff4, 0xfff2, 0xffef, 0xffec, 0xffe9, 0xffe6, 0xffe2, 
	0xffde, 0xffda, 0xffd6, 0xffd1, 0xffcd, 0xffc8, 0xffc3, 0xffbe, 
	0xffb8, 0xffb2, 0xffad, 0xffa7, 0xffa0, 0xff9a, 0xff93, 0xff8d, 
	0xff86, 0xff7f, 0xff77, 0xff70, 0xff68, 0xff61, 0xff59, 0xff51, 
	0xff49, 0xff41, 0xff38, 0xff30, 0xff27, 0xff1f, 0xff16, 0xff0d, 
	0xff04, 0xfefb, 0xfef2, 0xfee9, 0xfee0, 0xfed7, 0xfecd, 0xfec4, 
	0xfebb, 0xfeb1, 0xfea8, 0xfe9e, 0xfe95, 0xfe8b, 0xfe81, 0xfe78, 
	0xfe6e, 0xfe65, 0xfe5b, 0xfe52, 0xfe48, 0xfe3f, 0xfe36, 0xfe2c, 
	0xfe23, 0xfe1a, 0xfe11, 0xfe08, 0xfdff, 0xfdf6, 0xfded, 0xfde4, 
	0xfddc, 0xfdd3, 0xfdcb, 0xfdc2, 0xfdba, 0xfdb2, 0xfdaa, 0xfda2, 
	0xfd9b, 0xfd93, 0xfd8c, 0xfd84, 0xfd7d, 0xfd76, 0xfd70, 0xfd69, 
	0xfd63, 0xfd5c, 0xfd56, 0xfd51, 0xfd4b, 0xfd45, 0xfd40, 0xfd3b, 
	0xfd36, 0xfd32, 0xfd2d, 0xfd29, 0xfd25, 0xfd21, 0xfd1d, 0xfd1a, 
	0xfd17, 0xfd14, 0xfd11, 0xfd0f, 0xfd0d, 0xfd0b, 0xfd09, 0xfd07, 
	0xfd06, 0xfd05, 0xfd04, 0xfd03, 0xfd03, 0xfd03, 0xfd03, 0xfd03, 
	0xfd04, 0xfd05, 0xfd06, 0xfd07, 0xfd09, 0xfd0b, 0xfd0d, 0xfd0f, 
	0xfd11, 0xfd14, 0xfd17, 0xfd1a, 0xfd1d, 0xfd21, 0xfd25, 0xfd29, 
	0xfd2d, 0xfd32, 0xfd36, 0xfd3b, 0xfd40, 0xfd45, 0xfd4b, 0xfd51, 
	0xfd56, 0xfd5c, 0xfd63, 0xfd69, 0xfd70, 0xfd76, 0xfd7d, 0xfd84, 
	0xfd8c, 0xfd93, 0xfd9b, 0xfda2, 0xfdaa, 0xfdb2, 0xfdba, 0xfdc2, 
	0xfdcb, 0xfdd3, 0xfddc, 0xfde4, 0xfded, 0xfdf6, 0xfdff, 0xfe08, 
	0xfe11, 0xfe1a, 0xfe23, 0xfe2c, 0xfe36, 0xfe3f, 0xfe48, 0xfe52, 
	0xfe5b, 0xfe65, 0xfe6e, 0xfe78
};

uint16_t *sin_table_start = sin_table;
uint16_t *sin_table_end = sin_table + SIN_TOTAL;

uint8_t uart_code = GROUND_MOTOR;
uint8_t need_pwm = 0;
uint8_t need_update = 0;
// discard a few garbage bytes
uint8_t uart_discard = 1;
uint16_t duty0 = PCA_RELOAD + MAX_PWM / 2;
uint16_t duty1 = PCA_RELOAD + MAX_PWM / 2;
uint16_t duty2 = PCA_RELOAD + MAX_PWM / 2;

void update_motor()
{
    if(uart_code == GROUND_MOTOR)
    {
        P1 = 0x07;
//         PFET0 = 0;
//         PFET1 = 0; 
//         PFET2 = 0; 
//         NFET0 = 1; 
//         NFET1 = 1; 
//         NFET2 = 1; 
        duty0 = PCA_RELOAD + MAX_PWM / 2;
        duty1 = PCA_RELOAD + MAX_PWM / 2;
        duty2 = PCA_RELOAD + MAX_PWM / 2;
        need_pwm = 0;
    }
    else
    if(uart_code == COAST_MOTOR || uart_code >= SIN_TOTAL)
    {
// MOSFETs off
        P1 = 0x00;
//         PFET0 = 0;
//         PFET1 = 0; 
//         PFET2 = 0; 
//         NFET0 = 0; 
//         NFET1 = 0; 
//         NFET2 = 0;
        duty0 = PCA_RELOAD + MAX_PWM / 2;
        duty1 = PCA_RELOAD + MAX_PWM / 2;
        duty2 = PCA_RELOAD + MAX_PWM / 2;
        need_pwm = 0;
    }
    else
    {
//         uint16_t *ptr;
//         uint16_t duty0_;
//         uint16_t duty1_;
//         uint16_t duty2_;
//         ptr = sin_table_start + uart_code;
//         duty0_ = *ptr;
//         ptr += SIN_TOTAL / 3;
//         if(ptr >= sin_table_end) ptr -= SIN_TOTAL;
//         duty1_ = *ptr;
//         ptr += SIN_TOTAL / 3;
//         if(ptr >= sin_table_end) ptr -= SIN_TOTAL;
//         duty2_ = *ptr;
//         EA = 0;
//         duty0 = duty0_;
//         duty1 = duty1_;
//         duty2 = duty2_;
//         EA = 1;

        if(uart_code < SIN_TOTAL / 3)
        {
            PFET0 = 1;
            PFET1 = 1; 
            PFET2 = 0; 
            NFET0 = 0; 
            NFET1 = 0; 
            NFET2 = 1;
        }
        else
        if(uart_code < SIN_TOTAL * 2 / 3)
        {
            PFET0 = 0;
            PFET1 = 1; 
            PFET2 = 1; 
            NFET0 = 1; 
            NFET1 = 0; 
            NFET2 = 0;
        }
        else
        {
            PFET0 = 1;
            PFET1 = 0; 
            PFET2 = 1; 
            NFET0 = 0; 
            NFET1 = 1; 
            NFET2 = 0;
        }

        need_pwm = 1;
    }


    need_update = 0;
}

void main (void) 
{

// disable watchdog timer
    PCA0MD = 0;  // Disable watchdog timer


// Initialize system clock to
// 24.5MHz
    OSCICN = 0x83;                     // Configure internal oscillator for
                                       // its maximum frequency
    RSTSRC = 0x04;                         // enable missing clock detector

// crossbar page 128
    XBR0     = 0x01; // enable UART pins
// page 129
    XBR1     = 0xc0; // Enable crossbar and disable pull-ups

// UART page 158
    SCON0 = 0x10; // SCON0: 8-bit variable bit rate
                  //        level of STOP bit is ignored
                  //        RX enabled
                  //        ninth bits are zeros
                  //        clear RI0 and TI0 bits

// baud rate is created by timer 1 in 8 bit mode.  page 154
// baud = SYSTEMCLOCK / TH1 / 2
    TH1 = -(SYSTEMCLOCK/BAUD/2);
    TL1 = TH1; // init Timer1
// page 183
    CKCON = 0x0c; // No prescaling for timers
// page 182
// Timer0 in 16-bit mode
// Timer1 in 8-bit autoreload
    TMOD = 0x21; 
    TR1 = 1; // Timer1 on

    IP |= 0x10; // Make UART high priority
    ES0 = 1; // enable UART0 interrupt page 89

    LED = 0;

// Timer 0
//    TH0 = MAX_PWM >> 8;    // Init Timer0 High register
//    TL0 = MAX_PWM & 0xff ; // Init Timer0 Low register
//    ET0 = 1;               // Timer0 interrupt enabled
//    TR0 = 1; // Timer0 ON


// PCA page 205
    PCA0CN = 0x00; // Stop counter; clear all flags
    PCA0MD = 0x09; // Use SYSCLK as time base.  Enable overflow interrupt.
    PCA0CPM0 = 0xC9; // Module 0 = 16 bit Match and Interrupt
    PCA0CPM1 = 0xC9; // Module 1 = 16 bit Match and Interrupt
    PCA0CPM2 = 0xC9; // Module 2 = 16 bit Match and Interrupt
// set the period
    PCA0L = PCA_RELOAD & 0xff;
    PCA0H = PCA_RELOAD >> 8;

    update_motor();
    EIE1 |= 0x10; // enable PCA interrupts
    CR = 1; // start PCA counter


    P1MDOUT |= 0x77; // enable MOSFET pins as a push-pull outputs
    P0MDOUT |= 0x08; // enable LED as a push-pull output
    EA = 1; // enable global interrupts

    while (1) { // spin forever
        if(need_update)
            update_motor();
    }
}

void UART0_Interrupt (void) interrupt 4
{
    if (RI0 == 1)
    {
        RI0 = 0; // Clear interrupt flag
        
        if(uart_discard == 0)
        {
            uart_code = SBUF0; // Read a character from UART
        }
        else
        {
            uart_discard--;
        }

        need_update = 1;
//LED = ~LED; // debug
    }
}

void PCA0_ISR (void) interrupt 11
{
// overflow
    if(CF)
    {
        CF = 0;
//         if(need_pwm)
//         {
//             P1 = 0x70;
// //             NFET0 = 0;
// //             NFET1 = 0;
// //             NFET2 = 0;
// //             PFET0 = 1;
// //             PFET1 = 1;
// //             PFET2 = 1;
//         }
// LED = 1; // debug
//         PCA0L = PCA_RELOAD & 0xff;
//         PCA0H = PCA_RELOAD >> 8;
//         PCA0CPL0 = duty0 & 0xff;
//         PCA0CPH0 = duty0 >> 8;
//         PCA0CPL1 = duty1 & 0xff;
//         PCA0CPH1 = duty1 >> 8;
//         PCA0CPL2 = duty2 & 0xff;
//         PCA0CPH2 = duty2 >> 8;
// LED = 0; // debug
    }

    if(CCF0)
    {
        CCF0 = 0;                           // Clear module 0 interrupt flag.
//LED = 0; // debug
//         if(need_pwm)
//         {
//             PFET0 = 0;
//             NFET0 = 1;
//         }
    }

    if(CCF1)
    {
        CCF1 = 0;                           // Clear module 1 interrupt flag.
//         if(need_pwm)
//         {
//             PFET1 = 0;
//             NFET1 = 1;
//         }
    }

    if(CCF2)
    {
        CCF2 = 0;                           // Clear module 2 interrupt flag.
//         if(need_pwm)
//         {
//             PFET2 = 0;
//             NFET2 = 1;
//         }
    }
}



// void Timer0_ISR (void) interrupt 1
// {
//    TH0 = MAX_PWM >> 8;           // Reinit Timer0 High register
//    TL0 = MAX_PWM & 0xff;            // Reinit Timer0 Low register
//    LED = ~LED;  // Toggle the LED
// }





